#!/bin/bash

# Script de deploy for√ßado - ignora erros do xcode-select
# Reposit√≥rio: https://github.com/rsg384/oraetemedita.git

set -e  # Parar em caso de erro

echo "üöÄ Deploy for√ßado para GitHub..."
echo "üìÅ Diret√≥rio: $(pwd)"
echo "üîó Reposit√≥rio: https://github.com/rsg384/oraetemedita.git"
echo ""

# Fun√ß√£o para executar comando ignorando erros
execute_cmd() {
    local cmd="$1"
    local description="$2"
    
    echo "‚öôÔ∏è $description..."
    if eval "$cmd" 2>/dev/null; then
        echo "‚úÖ $description - OK"
    else
        echo "‚ö†Ô∏è $description - Ignorando erro"
    fi
}

# Configurar Git (ignorando erros)
execute_cmd "/usr/bin/git config --global user.name 'Rodrigo Silva Goes'" "Configurando Git user.name"
execute_cmd "/usr/bin/git config --global user.email 'rodrigo@oraetmedita.com'" "Configurando Git user.email"

# Inicializar reposit√≥rio
execute_cmd "/usr/bin/git init" "Inicializando reposit√≥rio Git"

# Adicionar arquivos
execute_cmd "/usr/bin/git add ." "Adicionando arquivos"

# Fazer primeiro commit
execute_cmd "/usr/bin/git commit -m 'üéâ Initial commit: Ora et Medita - Sistema de Medita√ß√µes Cat√≥licas'" "Fazendo primeiro commit"

# Conectar com GitHub
execute_cmd "/usr/bin/git remote add origin https://github.com/rsg384/oraetemedita.git" "Conectando com GitHub"

# Enviar para GitHub
execute_cmd "/usr/bin/git branch -M main" "Configurando branch main"
execute_cmd "/usr/bin/git push -u origin main" "Enviando para GitHub"

echo ""
echo "‚úÖ Deploy for√ßado conclu√≠do!"
echo "üåê Acesse: https://github.com/rsg384/oraetemedita"
echo ""
echo "üîß Para futuros deploys, use:"
echo "   ./cursor-deploy.sh" 
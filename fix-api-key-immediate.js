// Script para configurar imediatamente a chave da API do ChatGPT
console.log('üîß Script de configura√ß√£o imediata da API carregado');

// Fun√ß√£o para configurar a chave da API imediatamente
async function configureAPIKeyImmediately() {
    console.log('üîß Configurando chave da API imediatamente...');
    
    try {
        // 1. Verificar se a tabela api_configs existe
        console.log('üîç Verificando tabela api_configs...');
        const supabaseVars = getSupabaseVariables();
        
        const checkResponse = await fetch(`${supabaseVars.url}/rest/v1/api_configs?select=count`, {
            method: 'GET',
            headers: {
                'apikey': supabaseVars.key,
                'Authorization': `Bearer ${supabaseVars.key}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!checkResponse.ok) {
            console.log('‚ùå Tabela api_configs n√£o existe. Criando...');
            await createAPIConfigsTable();
        } else {
            console.log('‚úÖ Tabela api_configs existe');
        }
        
        // 2. Solicitar chave da API
        const apiKey = prompt('üîë Digite sua chave da API do ChatGPT (sk-...):\n\nPara obter sua chave:\n1. Acesse: https://platform.openai.com/account/api-keys\n2. Fa√ßa login\n3. Clique em "Create new secret key"\n4. Copie a chave (come√ßa com "sk-")');
        
        if (!apiKey || apiKey.trim() === '') {
            console.log('‚ùå Chave da API n√£o fornecida');
            return false;
        }
        
        // 3. Testar a chave
        console.log('üß™ Testando chave da API...');
        const isValid = await testAPIKey(apiKey);
        
        if (!isValid) {
            console.log('‚ùå Chave da API inv√°lida');
            alert('‚ùå Chave da API inv√°lida. Verifique se a chave est√° correta.');
            return false;
        }
        
        console.log('‚úÖ Chave da API v√°lida');
        
        // 4. Inserir no Supabase
        console.log('üì§ Salvando chave no Supabase...');
        const inserted = await insertAPIKeyToSupabase(apiKey);
        
        if (inserted) {
            console.log('‚úÖ Chave da API configurada com sucesso');
            alert('‚úÖ Chave da API configurada com sucesso!');
            
            // 5. Testar configura√ß√£o completa
            await testCompleteSetup();
            
            return true;
        } else {
            console.log('‚ùå Erro ao configurar chave da API');
            alert('‚ùå Erro ao configurar chave da API. Verifique a conex√£o com o Supabase.');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro na configura√ß√£o:', error);
        alert('‚ùå Erro na configura√ß√£o: ' + error.message);
        return false;
    }
}

// Fun√ß√£o para testar a configura√ß√£o atual
async function testCurrentConfiguration() {
    console.log('üß™ Testando configura√ß√£o atual...');
    
    try {
        // 1. Testar busca da chave do Supabase
        const apiKey = await getAPIKeyFromSupabase();
        if (!apiKey) {
            console.log('‚ùå Nenhuma chave configurada no Supabase');
            return false;
        }
        
        // 2. Testar validade da chave
        const isValid = await testAPIKey(apiKey);
        if (!isValid) {
            console.log('‚ùå Chave da API inv√°lida');
            return false;
        }
        
        // 3. Testar fun√ß√£o substitu√≠da
        if (window.chatGPTAPI && window.chatGPTAPI.getAPIKey) {
            const testKey = await window.chatGPTAPI.getAPIKey();
            if (testKey && testKey !== 'sk-proj-...') {
                console.log('‚úÖ Configura√ß√£o completa funcionando');
                return true;
            }
        }
        
        console.log('‚ùå Fun√ß√£o de busca n√£o funcionando');
        return false;
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
        return false;
    }
}

// Fun√ß√£o para for√ßar a substitui√ß√£o da fun√ß√£o de busca
function forceReplaceAPIKeyFunction() {
    console.log('üîß For√ßando substitui√ß√£o da fun√ß√£o de busca da chave...');
    
    if (window.chatGPTAPI && window.chatGPTAPI.getAPIKey) {
        const originalGetAPIKey = window.chatGPTAPI.getAPIKey;
        
        window.chatGPTAPI.getAPIKey = async function() {
            console.log('üîç Buscando chave da API (fun√ß√£o for√ßada)...');
            
            // 1. Tentar buscar do Supabase
            const supabaseKey = await getAPIKeyFromSupabase();
            if (supabaseKey && supabaseKey !== 'sua_chave_aqui' && supabaseKey !== 'sk-proj-...') {
                console.log('‚úÖ Usando chave do Supabase');
                return supabaseKey;
            }
            
            // 2. Tentar buscar do localStorage
            const localKey = localStorage.getItem('chatgpt_api_key');
            if (localKey && localKey !== 'sk-proj-...') {
                console.log('‚úÖ Usando chave do localStorage');
                return localKey;
            }
            
            // 3. Usar fun√ß√£o original como fallback
            console.log('‚ö†Ô∏è Usando fun√ß√£o original como fallback');
            return originalGetAPIKey.call(this);
        };
        
        console.log('‚úÖ Fun√ß√£o de busca da chave for√ßada');
    } else {
        console.log('‚ùå chatGPTAPI.getAPIKey n√£o encontrada');
    }
}

// Fun√ß√£o para limpar chaves inv√°lidas
function clearInvalidAPIKeys() {
    console.log('üßπ Limpando chaves inv√°lidas...');
    
    // Limpar localStorage
    const localKey = localStorage.getItem('chatgpt_api_key');
    if (localKey && localKey.includes('sk-proj-...')) {
        localStorage.removeItem('chatgpt_api_key');
        console.log('‚úÖ Chave inv√°lida removida do localStorage');
    }
    
    // Limpar vari√°veis globais
    if (window.chatGPTAPI && window.chatGPTAPI.apiKey) {
        if (window.chatGPTAPI.apiKey.includes('sk-proj-...')) {
            delete window.chatGPTAPI.apiKey;
            console.log('‚úÖ Chave inv√°lida removida do chatGPTAPI');
        }
    }
    
    console.log('‚úÖ Limpeza conclu√≠da');
}

// Fun√ß√£o para mostrar status da configura√ß√£o
function showConfigurationStatus() {
    console.log('üìä Status da configura√ß√£o da API:');
    console.log('1. Verificando chave no Supabase...');
    getAPIKeyFromSupabase().then(apiKey => {
        if (apiKey) {
            console.log('‚úÖ Chave encontrada no Supabase');
            testAPIKey(apiKey).then(isValid => {
                if (isValid) {
                    console.log('‚úÖ Chave v√°lida');
                } else {
                    console.log('‚ùå Chave inv√°lida');
                }
            });
        } else {
            console.log('‚ùå Nenhuma chave no Supabase');
        }
    });
    
    console.log('2. Verificando localStorage...');
    const localKey = localStorage.getItem('chatgpt_api_key');
    if (localKey) {
        console.log('‚úÖ Chave encontrada no localStorage');
    } else {
        console.log('‚ùå Nenhuma chave no localStorage');
    }
    
    console.log('3. Verificando chatGPTAPI...');
    if (window.chatGPTAPI) {
        console.log('‚úÖ chatGPTAPI dispon√≠vel');
    } else {
        console.log('‚ùå chatGPTAPI n√£o dispon√≠vel');
    }
}

// Exportar fun√ß√µes
window.configureAPIKeyImmediately = configureAPIKeyImmediately;
window.testCurrentConfiguration = testCurrentConfiguration;
window.forceReplaceAPIKeyFunction = forceReplaceAPIKeyFunction;
window.clearInvalidAPIKeys = clearInvalidAPIKeys;
window.showConfigurationStatus = showConfigurationStatus;

// Auto-inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script de configura√ß√£o imediata carregado');
    
    setTimeout(async () => {
        console.log('üîß Aplicando configura√ß√µes imediatas...');
        
        // Limpar chaves inv√°lidas
        clearInvalidAPIKeys();
        
        // For√ßar substitui√ß√£o da fun√ß√£o
        forceReplaceAPIKeyFunction();
        
        // Mostrar status
        showConfigurationStatus();
        
        // Testar configura√ß√£o atual
        const isWorking = await testCurrentConfiguration();
        
        if (!isWorking) {
            console.log('‚ö†Ô∏è Configura√ß√£o n√£o funcionando. Use configureAPIKeyImmediately() para configurar.');
        } else {
            console.log('‚úÖ Configura√ß√£o funcionando corretamente');
        }
    }, 1000);
});

console.log('‚úÖ Script de configura√ß√£o imediata da API carregado'); 
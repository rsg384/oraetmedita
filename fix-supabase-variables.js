// Script para corrigir problema das vari√°veis do Supabase
console.log('üîß Script de corre√ß√£o das vari√°veis do Supabase carregado');

// Fun√ß√£o para obter as vari√°veis do Supabase corretamente
function getSupabaseVariables() {
    console.log('üîç Verificando vari√°veis do Supabase...');
    
    // Verificar se as vari√°veis est√£o dispon√≠veis globalmente
    if (typeof SUPABASE_URL !== 'undefined' && typeof SUPABASE_ANON_KEY !== 'undefined') {
        console.log('‚úÖ Vari√°veis do Supabase encontradas globalmente');
        return {
            url: SUPABASE_URL,
            key: SUPABASE_ANON_KEY
        };
    }
    
    // Verificar se est√£o no window
    if (window.SUPABASE_URL && window.SUPABASE_ANON_KEY) {
        console.log('‚úÖ Vari√°veis do Supabase encontradas no window');
        return {
            url: window.SUPABASE_URL,
            key: window.SUPABASE_ANON_KEY
        };
    }
    
    // Tentar obter do SUPABASE_CONFIG
    if (typeof SUPABASE_CONFIG !== 'undefined') {
        console.log('‚úÖ Vari√°veis do Supabase encontradas em SUPABASE_CONFIG');
        return {
            url: SUPABASE_CONFIG.url,
            key: SUPABASE_CONFIG.anonKey
        };
    }
    
    // Verificar se existe uma inst√¢ncia do SupabaseManager
    if (window.supabaseManager && window.supabaseManager.config) {
        console.log('‚úÖ Vari√°veis do Supabase encontradas em supabaseManager');
        return {
            url: window.supabaseManager.config.url,
            key: window.supabaseManager.config.anonKey
        };
    }
    
    // Tentar obter do supabaseConfig
    if (typeof supabaseConfig !== 'undefined') {
        console.log('‚úÖ Vari√°veis do Supabase encontradas em supabaseConfig');
        return {
            url: supabaseConfig.url,
            key: supabaseConfig.anonKey
        };
    }
    
    // Verificar se existe uma fun√ß√£o para obter as vari√°veis
    if (typeof getSupabaseConfig === 'function') {
        console.log('‚úÖ Usando fun√ß√£o getSupabaseConfig');
        const config = getSupabaseConfig();
        return {
            url: config.url,
            key: config.anonKey
        };
    }
    
    // √öltima tentativa: usar valores hardcoded do supabase-config.js
    console.log('‚ö†Ô∏è Usando valores hardcoded do supabase-config.js');
    return {
        url: 'https://pmqxibhulaybvpjvdvyp.supabase.co',
        key: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBtcXhpYmh1bGF5YnZwanZkdnlwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2NTg0MjUsImV4cCI6MjA2OTIzNDQyNX0.biPp1NLnfvjspZgDv7RLt9_Ymtayy68cHgnPKy_FAWc'
    };
}

// Fun√ß√£o para criar medita√ß√£o usando as vari√°veis corretas
async function createMeditationWithCorrectVariables(meditationData) {
    console.log('üîÑ Criando medita√ß√£o com vari√°veis corretas...');
    
    try {
        const supabaseVars = getSupabaseVariables();
        console.log('üìã Vari√°veis do Supabase obtidas:', supabaseVars.url);
        
        console.log('üì§ Dados para enviar ao Supabase:', meditationData);
        
        // Fazer requisi√ß√£o para criar medita√ß√£o
        const response = await fetch(`${supabaseVars.url}/rest/v1/meditations`, {
            method: 'POST',
            headers: {
                'apikey': supabaseVars.key,
                'Authorization': `Bearer ${supabaseVars.key}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            },
            body: JSON.stringify(meditationData)
        });
        
        console.log('üìä Status da resposta:', response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Medita√ß√£o criada no Supabase:', result);
            return result;
        } else {
            const errorData = await response.json();
            console.error('‚ùå Erro ao criar medita√ß√£o no Supabase:', errorData);
            throw new Error(`Erro ${response.status}: ${errorData.message || 'Erro desconhecido'}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro na cria√ß√£o da medita√ß√£o:', error);
        throw error;
    }
}

// Fun√ß√£o para testar a cria√ß√£o de medita√ß√£o
async function testMeditationCreation() {
    console.log('üß™ Testando cria√ß√£o de medita√ß√£o...');
    
    try {
        // Buscar primeira categoria dispon√≠vel
        const categories = JSON.parse(localStorage.getItem('categories') || '[]');
        const testCategory = categories[0];
        
        if (!testCategory) {
            throw new Error('Nenhuma categoria dispon√≠vel para teste');
        }
        
        // Criar medita√ß√£o de teste
        const testMeditation = {
            title: 'Teste Vari√°veis Corrigidas',
            content: 'Esta √© uma medita√ß√£o de teste para verificar as vari√°veis corrigidas.',
            category_id: testCategory.id,
            duration: 15,
            status: 'available',
            type: 'free',
            difficulty: 'beginner',
            bible_verse: 'Salmo 1:1-2',
            prayer: 'Senhor, obrigado por este teste.',
            practical_application: 'Aplicar os ensinamentos do teste.',
            tags: ['teste', 'variaveis'],
            icon: 'üß™',
            color: '#7ee787',
            is_active: true,
            sort_order: 0
        };
        
        console.log('üìã Medita√ß√£o de teste:', testMeditation);
        
        // Tentar criar no Supabase
        const result = await createMeditationWithCorrectVariables(testMeditation);
        
        console.log('‚úÖ Teste bem-sucedido:', result);
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
        return false;
    }
}

// Fun√ß√£o para substituir a fun√ß√£o de cria√ß√£o no painel admin
function replaceAdminCreationFunction() {
    console.log('üîß Substituindo fun√ß√£o de cria√ß√£o no painel admin...');
    
    // Substituir a fun√ß√£o de cria√ß√£o de medita√ß√µes
    if (window.adminSupabaseSync && window.adminSupabaseSync.syncMeditationToSupabase) {
        const originalFunction = window.adminSupabaseSync.syncMeditationToSupabase;
        
        window.adminSupabaseSync.syncMeditationToSupabase = async function(meditation) {
            console.log('üîÑ Sincronizando medita√ß√£o com vari√°veis corrigidas...');
            
            try {
                const supabaseVars = getSupabaseVariables();
                console.log('üìã Vari√°veis do Supabase obtidas:', supabaseVars.url);
                
                // Mapear dados para estrutura do Supabase
                const supabaseData = {
                    title: meditation.title || meditation.name,
                    content: meditation.content || meditation.description || '',
                    category_id: meditation.category_id || meditation.categoryId,
                    duration: meditation.duration || 10,
                    status: meditation.status || 'available',
                    type: meditation.type || 'free',
                    difficulty: meditation.difficulty || 'intermediate',
                    is_active: meditation.is_active !== undefined ? meditation.is_active : true,
                    sort_order: meditation.sort_order || meditation.sortOrder || 0,
                    bible_verse: meditation.bible_verse || meditation.bibleVerse || '',
                    prayer: meditation.prayer || '',
                    practical_application: meditation.practical_application || meditation.practicalApplication || '',
                    tags: meditation.tags || [],
                    icon: meditation.icon || '',
                    color: meditation.color || '#7ee787',
                    created_by: meditation.created_by || meditation.createdBy || null,
                    version: meditation.version || 1
                };
                
                console.log('üì§ Dados para enviar ao Supabase:', supabaseData);
                
                // Fazer requisi√ß√£o para criar medita√ß√£o
                const response = await fetch(`${supabaseVars.url}/rest/v1/meditations`, {
                    method: 'POST',
                    headers: {
                        'apikey': supabaseVars.key,
                        'Authorization': `Bearer ${supabaseVars.key}`,
                        'Content-Type': 'application/json',
                        'Prefer': 'return=representation'
                    },
                    body: JSON.stringify(supabaseData)
                });
                
                console.log('üìä Status da resposta:', response.status);
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('‚úÖ Medita√ß√£o criada no Supabase:', result);
                    
                    // Atualizar ID local com ID do Supabase
                    meditation.supabase_id = result[0].id;
                    
                    return true;
                } else {
                    const errorData = await response.json();
                    console.error('‚ùå Erro ao criar medita√ß√£o no Supabase:', errorData);
                    return false;
                }
                
            } catch (error) {
                console.error('‚ùå Erro na sincroniza√ß√£o:', error);
                return false;
            }
        };
        
        console.log('‚úÖ Fun√ß√£o de cria√ß√£o substitu√≠da');
    } else {
        console.error('‚ùå Fun√ß√£o adminSupabaseSync.syncMeditationToSupabase n√£o encontrada');
    }
}

// Exportar fun√ß√µes
window.getSupabaseVariables = getSupabaseVariables;
window.createMeditationWithCorrectVariables = createMeditationWithCorrectVariables;
window.testMeditationCreation = testMeditationCreation;
window.replaceAdminCreationFunction = replaceAdminCreationFunction;

// Auto-inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script de corre√ß√£o das vari√°veis carregado');
    
    setTimeout(async () => {
        console.log('üîß Aplicando corre√ß√µes...');
        
        // Verificar vari√°veis
        const vars = getSupabaseVariables();
        console.log('‚úÖ Vari√°veis do Supabase obtidas:', vars.url);
        
        // Substituir fun√ß√£o de cria√ß√£o
        replaceAdminCreationFunction();
        
        // Testar cria√ß√£o
        await testMeditationCreation();
    }, 2000);
});

console.log('‚úÖ Script de corre√ß√£o das vari√°veis do Supabase carregado'); 
// Script para corrigir automaticamente o problema do perfil do usu√°rio
console.log('üîß Iniciando corre√ß√£o autom√°tica do perfil do usu√°rio...');

// Fun√ß√£o para for√ßar atualiza√ß√£o do perfil
function forceUpdateUserProfile() {
    console.log('üîÑ For√ßando atualiza√ß√£o do perfil do usu√°rio...');
    
    try {
        // Verificar se SessionManager existe
        if (!window.sessionManager) {
            console.error('‚ùå SessionManager n√£o encontrado');
            return;
        }
        
        // Obter dados do usu√°rio via SessionManager
        const userData = window.sessionManager.getCurrentUser();
        console.log('üìä Dados do usu√°rio via SessionManager:', userData);
        
        // Fallback: tentar obter dados do localStorage diretamente
        if (!userData) {
            console.log('‚ö†Ô∏è Tentando fallback para localStorage...');
            const localStorageUserData = localStorage.getItem('userData');
            if (localStorageUserData) {
                try {
                    const parsedUserData = JSON.parse(localStorageUserData);
                    console.log('üìä Dados do localStorage:', parsedUserData);
                    if (parsedUserData && parsedUserData.name) {
                        console.log('‚úÖ Usando dados do localStorage como fallback');
                        updateUserProfileElements(parsedUserData);
                        return;
                    }
                } catch (error) {
                    console.error('‚ùå Erro ao parsear dados do localStorage:', error);
                }
            }
            
            // Fallback adicional: verificar se h√° usu√°rio logado em outras sess√µes
            const activeSessions = window.sessionManager.getActiveSessions();
            if (activeSessions && activeSessions.length > 0) {
                const latestSession = activeSessions[activeSessions.length - 1];
                console.log('‚úÖ Usando dados da sess√£o ativa:', latestSession.name);
                updateUserProfileElements(latestSession);
                return;
            }
            
            console.log('‚ö†Ô∏è Nenhum usu√°rio logado encontrado');
            return;
        }
        
        // Atualizar elementos com os dados do SessionManager
        updateUserProfileElements(userData);
        
    } catch (error) {
        console.error('‚ùå Erro ao atualizar perfil do usu√°rio:', error);
    }
}

// Fun√ß√£o auxiliar para atualizar elementos do perfil
function updateUserProfileElements(userData) {
    try {
        console.log('üîß Atualizando elementos do perfil com dados:', userData);
        
        if (userData.name) {
            console.log('üë§ Atualizando nome do usu√°rio:', userData.name);
            
            // Extrair nome e sobrenome
            const nameParts = userData.name.trim().split(' ');
            const firstName = nameParts[0];
            const lastName = nameParts.length > 1 ? nameParts[nameParts.length - 1] : '';
            
            // Gerar iniciais
            let initials = firstName.charAt(0).toUpperCase();
            if (lastName) {
                initials += lastName.charAt(0).toUpperCase();
            }
            
            console.log('üÜî Iniciais geradas:', initials);
            
            // Atualizar avatar
            const userAvatar = document.getElementById('userAvatar');
            console.log('üîç userAvatar encontrado:', !!userAvatar);
            if (userAvatar) {
                userAvatar.textContent = initials;
                console.log('‚úÖ Avatar atualizado com iniciais:', initials);
            } else {
                console.warn('‚ö†Ô∏è Elemento userAvatar n√£o encontrado');
            }
            
            // Atualizar nome
            const userName = document.getElementById('userName');
            console.log('üîç userName encontrado:', !!userName);
            if (userName) {
                userName.textContent = userData.name;
                console.log('‚úÖ Nome atualizado:', userData.name);
            } else {
                console.warn('‚ö†Ô∏è Elemento userName n√£o encontrado');
            }
            
            // Atualizar sauda√ß√£o
            const heroGreeting = document.getElementById('heroGreeting');
            console.log('üîç heroGreeting encontrado:', !!heroGreeting);
            if (heroGreeting) {
                const now = new Date();
                const hour = now.getHours();
                let greeting = 'üåÖ Bom dia';
                
                if (hour >= 12 && hour < 18) {
                    greeting = '‚òÄÔ∏è Boa tarde';
                } else if (hour >= 18) {
                    greeting = 'üåô Boa noite';
                }
                
                heroGreeting.textContent = `${greeting}, ${firstName}!`;
                console.log('‚úÖ Sauda√ß√£o atualizada:', `${greeting}, ${firstName}!`);
            } else {
                console.warn('‚ö†Ô∏è Elemento heroGreeting n√£o encontrado');
            }
            
            console.log('‚úÖ Perfil do usu√°rio atualizado com sucesso:', userData.name);
        } else {
            console.log('‚ö†Ô∏è Nome do usu√°rio n√£o encontrado nos dados');
        }
    } catch (error) {
        console.error('‚ùå Erro ao atualizar elementos do perfil:', error);
    }
}

// Executar corre√ß√£o ap√≥s carregamento da p√°gina
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(forceUpdateUserProfile, 1000);
    });
} else {
    setTimeout(forceUpdateUserProfile, 1000);
}

// Tornar fun√ß√£o global para uso manual
window.forceUpdateUserProfile = forceUpdateUserProfile;

console.log('‚úÖ Script de corre√ß√£o do perfil do usu√°rio carregado'); 
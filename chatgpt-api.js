// API do ChatGPT para Gera√ß√£o de Medita√ß√µes Lectio Divina
// Implementa√ß√£o limpa e direta seguindo as especifica√ß√µes do usu√°rio

class ChatGPTAPI {
    constructor() {
        // Configura√ß√£o h√≠brida: primeiro tenta localStorage, depois chave hardcoded
        this.config = {
            BASE_URL: 'https://api.openai.com/v1',
            MODEL: 'gpt-4o-mini',
            MAX_TOKENS: 4000,
            TEMPERATURE: 0.7
        };
        
        // Inicializar a chave da API
        this.initializeApiKey();
        
        console.log('üîß ChatGPTAPI inicializada com sucesso');
    }

    // Inicializar a chave da API
    initializeApiKey() {
        const apiKey = this.getApiKey();
        this.config.API_KEY = apiKey;
        console.log('üîë API Key inicializada:', apiKey ? apiKey.substring(0, 10) + '...' + apiKey.substring(apiKey.length - 4) : 'N√ÉO ENCONTRADA');
    }

    // Fun√ß√£o para obter a chave da API de forma segura
    getApiKey() {
        console.log('üîç Iniciando busca pela chave da API...');
        
        // 1. Primeiro, tentar obter do localStorage
        const storedKey = localStorage.getItem('openai_api_key');
        console.log('üîç localStorage:', storedKey ? 'ENCONTRADO' : 'N√ÉO ENCONTRADO');
        if (storedKey && storedKey.startsWith('sk-')) {
            console.log('‚úÖ Usando chave do localStorage');
            return storedKey;
        }
        
        // 2. Depois, usar a chave hardcoded (sua chave real)
        const hardcodedKey = "sk-proj-..."; // ‚ö†Ô∏è Chave removida por seguran√ßa
        console.log('üîç Chave hardcoded:', hardcodedKey ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA');
        if (hardcodedKey && hardcodedKey.startsWith('sk-')) {
            console.log('‚úÖ Usando chave hardcoded');
            return hardcodedKey;
        }
        
        // 3. Por √∫ltimo, tentar window.getApiKey se dispon√≠vel
        if (window.getApiKey && typeof window.getApiKey === 'function') {
            const windowKey = window.getApiKey();
            console.log('üîç window.getApiKey:', windowKey ? 'DISPON√çVEL' : 'N√ÉO DISPON√çVEL');
            if (windowKey && windowKey.startsWith('sk-')) {
                console.log('‚úÖ Usando chave do window.getApiKey');
                return windowKey;
            }
        }
        
        // 4. Fallback para chave padr√£o
        console.log('‚ö†Ô∏è Usando chave padr√£o (pode n√£o funcionar)');
        return "YOUR_OPENAI_API_KEY_HERE";
    }

    // Verificar status da API
    async checkAPIStatus() {
        try {
            console.log('üîç Verificando status da API do ChatGPT...');
            
            // Obter chave da API usando o m√©todo interno
            const apiKey = this.getApiKey();
            console.log('üîë Chave obtida:', apiKey ? apiKey.substring(0, 10) + '...' + apiKey.substring(apiKey.length - 4) : 'N√ÉO ENCONTRADA');
            
            if (!apiKey || !apiKey.startsWith('sk-')) {
                console.error('‚ùå Chave da API n√£o configurada ou inv√°lida');
                return { status: 'error', message: 'Chave da API n√£o configurada' };
            }
            
            console.log('üîë Usando chave:', apiKey.substring(0, 10) + '...' + apiKey.substring(apiKey.length - 4));
            
            const response = await fetch(`${this.config.BASE_URL}/models`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('üì° Resposta da API:', response.status, response.statusText);

            if (response.ok) {
                const data = await response.json();
                console.log('‚úÖ API do ChatGPT est√° funcionando. Modelos dispon√≠veis:', data.data.length);
                return { status: 'success', message: 'API funcionando' };
            } else {
                const errorText = await response.text();
                console.error('‚ùå API do ChatGPT retornou erro:', response.status, errorText);
                return { status: 'error', message: `Erro ${response.status}: ${errorText}` };
            }
        } catch (error) {
            console.error('‚ùå Erro ao verificar API:', error);
            return { status: 'error', message: `Erro ao verificar API: ${error.message}` };
        }
    }

    // Gerar medita√ß√µes baseadas em um t√≥pico
    async generateMeditations(topic) {
        try {
            console.log('üöÄ Iniciando gera√ß√£o de medita√ß√µes para:', topic);
            
            // Verificar se a API est√° funcionando
            const apiStatus = await this.checkAPIStatus();
            if (apiStatus.status !== 'success') {
                throw new Error(`API n√£o est√° dispon√≠vel: ${apiStatus.message}`);
            }
            
            // Carregar documentos de refer√™ncia
            const documents = await this.loadDocuments();
            
            // Criar prompt para o ChatGPT
            const prompt = this.createMeditationPrompt(topic, documents);
            
            // Chamar ChatGPT
            const response = await this.callChatGPT(prompt);
            
            // Processar resposta
            const meditations = this.processMeditations(response, topic);
            
            console.log('‚úÖ Medita√ß√µes geradas com sucesso:', meditations.length);
            return { meditations };
            
        } catch (error) {
            console.error('‚ùå Erro ao gerar medita√ß√µes:', error);
            throw error;
        }
    }

    // Carregar documentos de refer√™ncia
    async loadDocuments() {
        try {
            console.log('üìö Carregando documentos de refer√™ncia...');
            
            // Documentos base para medita√ß√µes cat√≥licas
            const documents = {
                'amor': 'O amor de Deus √© um mist√©rio profundo, que transcende toda compreens√£o humana. "Deus √© amor" (1 Jo√£o 4, 8).',
                'fe': 'A f√© √© a certeza das coisas que se esperam, a convic√ß√£o dos fatos que n√£o se veem (Hebreus 11, 1).',
                'esperanca': 'A esperan√ßa n√£o decepciona, porque o amor de Deus foi derramado em nossos cora√ß√µes pelo Esp√≠rito Santo (Romanos 5, 5).',
                'perdao': 'Perdoai-nos as nossas ofensas, assim como n√≥s perdoamos a quem nos tem ofendido (Mateus 6, 12).',
                'paz': 'Deixo-vos a paz, a minha paz vos dou; n√£o vo-la dou como o mundo a d√° (Jo√£o 14, 27).',
                'gratidao': 'Em tudo dai gra√ßas, porque esta √© a vontade de Deus em Cristo Jesus para convosco (1 Tessalonicenses 5, 18).',
                'humildade': 'Aprendei de mim, que sou manso e humilde de cora√ß√£o (Mateus 11, 29).',
                'caridade': 'Agora, pois, permanecem a f√©, a esperan√ßa e a caridade, estas tr√™s; mas a maior destas √© a caridade (1 Cor√≠ntios 13, 13).'
            };
            
            console.log('‚úÖ Documentos carregados:', Object.keys(documents).length);
            return documents;
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar documentos:', error);
            return {};
        }
    }

    // Criar prompt para o ChatGPT
    createMeditationPrompt(topic, documents) {
        console.log('üìù Criando prompt para t√≥pico:', topic);
        
        // Encontrar documento relevante
        const relevantDoc = documents[topic.toLowerCase()] || documents['amor'];
        
        const prompt = `Crie uma medita√ß√£o cat√≥lica sobre "${topic}" seguindo o m√©todo Lectio Divina.

Contexto b√≠blico: ${relevantDoc}

Estrutura da medita√ß√£o:
1. **Lectio (Leitura)**: Uma passagem b√≠blica relacionada ao tema
2. **Meditatio (Medita√ß√£o)**: Reflex√£o sobre o que Deus est√° dizendo
3. **Oratio (Ora√ß√£o)**: Ora√ß√£o pessoal baseada na medita√ß√£o
4. **Contemplatio (Contempla√ß√£o)**: Momento de sil√™ncio e contempla√ß√£o

Formato da resposta:
**Lectio:**
[passagem b√≠blica]

**Meditatio:**
[reflex√£o]

**Oratio:**
[ora√ß√£o]

**Contemplatio:**
[contempla√ß√£o]

Dura√ß√£o: 15 minutos
T√≥pico: ${topic}`;

        console.log('üìù Prompt criado com sucesso');
        return prompt;
    }

    // Chamar API do ChatGPT
    async callChatGPT(prompt) {
        try {
            console.log('ü§ñ Chamando API do ChatGPT...');
            
            const response = await fetch(`${this.config.BASE_URL}/chat/completions`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.config.API_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: this.config.MODEL,
                    messages: [
                        {
                            role: 'system',
                            content: 'Voc√™ √© um assistente especializado em criar medita√ß√µes cat√≥licas profundas e inspiradoras, seguindo o m√©todo Lectio Divina.'
                        },
                        {
                            role: 'user',
                            content: prompt
                        }
                    ],
                    max_tokens: this.config.MAX_TOKENS,
                    temperature: this.config.TEMPERATURE
                })
            });

            console.log('üì° Resposta do ChatGPT:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Erro na API do ChatGPT:', response.status, errorText);
                throw new Error(`Erro na API: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            const content = data.choices[0].message.content;
            
            console.log('‚úÖ Resposta do ChatGPT obtida');
            return content;
            
        } catch (error) {
            console.error('‚ùå Erro ao chamar ChatGPT:', error);
            throw error;
        }
    }

    // Processar medita√ß√£o simples
    processSimpleMeditation(content, topic) {
        try {
            console.log('üîß Processando medita√ß√£o simples...');
            
            const meditation = {
                id: `meditation-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                title: `Medita√ß√£o sobre ${topic}`,
                topic: topic,
                content: this.cleanText(content),
                duration: '15 min',
                status: 'completed',
                source: 'chatgpt',
                type: 'simple',
                createdAt: new Date().toISOString(),
                lastUpdated: new Date().toISOString()
            };
            
            console.log('‚úÖ Medita√ß√£o simples processada');
            return meditation;
            
        } catch (error) {
            console.error('‚ùå Erro ao processar medita√ß√£o simples:', error);
            throw error;
        }
    }

    // Processar medita√ß√µes complexas (Lectio Divina)
    processMeditations(content, topic) {
        try {
            console.log('üîß Processando medita√ß√µes Lectio Divina...');
            
            // Extrair se√ß√µes da medita√ß√£o
            const lectio = this.extractSection(content, 'Lectio');
            const meditatio = this.extractSection(content, 'Meditatio');
            const oratio = this.extractSection(content, 'Oratio');
            const contemplatio = this.extractSection(content, 'Contemplatio');
            
            // Criar medita√ß√£o estruturada
            const meditation = {
                id: `meditation-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                title: `Medita√ß√£o sobre ${topic}`,
                topic: topic,
                content: this.cleanText(content),
                duration: '15 min',
                status: 'completed',
                source: 'chatgpt',
                type: 'lectio-divina',
                sections: {
                    lectio: lectio,
                    meditatio: meditatio,
                    oratio: oratio,
                    contemplatio: contemplatio
                },
                createdAt: new Date().toISOString(),
                lastUpdated: new Date().toISOString()
            };
            
            console.log('‚úÖ Medita√ß√£o Lectio Divina processada');
            return [meditation];
            
        } catch (error) {
            console.error('‚ùå Erro ao processar medita√ß√µes:', error);
            // Fallback para medita√ß√£o simples
            console.log('üîÑ Fallback para medita√ß√£o simples...');
            return [this.processSimpleMeditation(content, topic)];
        }
    }

    // Extrair medita√ß√µes do conte√∫do
    extractMeditations(content) {
        try {
            console.log('üîç Extraindo medita√ß√µes do conte√∫do...');
            
            const meditations = [];
            const sections = content.split(/\*\*[^*]+\*\*:/);
            
            if (sections.length > 1) {
                // Conte√∫do estruturado
                console.log('üìã Conte√∫do estruturado encontrado');
                return this.processMeditations(content, 'T√≥pico');
            } else {
                // Conte√∫do simples
                console.log('üìã Conte√∫do simples encontrado');
                return [this.processSimpleMeditation(content, 'T√≥pico')];
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao extrair medita√ß√µes:', error);
            return [];
        }
    }

    // Extrair se√ß√£o espec√≠fica do conte√∫do
    extractSection(content, sectionName) {
        try {
            const regex = new RegExp(`\\*\\*${sectionName}:\\*\\*\\s*([\\s\\S]*?)(?=\\*\\*[^*]+:\\*\\*|$)`, 'i');
            const match = content.match(regex);
            
            if (match && match[1]) {
                let sectionContent = match[1].trim();
                
                // Formatar se√ß√£o espec√≠fica
                if (sectionName.toLowerCase() === 'lectio') {
                    // Formatar leitura com it√°lico para cita√ß√µes
                    sectionContent = sectionContent.replace(/\*(.*?)\*/g, '<em>$1</em>');
                } else if (sectionName.toLowerCase() === 'meditatio') {
                    // Formatar medita√ß√£o com negrito para "Meditando:"
                    sectionContent = sectionContent
                        .replace(/\*(.*?)\*/g, '<em>$1</em>')
                        .replace(/\*\*Meditando:\*\*/g, '<strong>Meditando:</strong>');
                } else if (sectionName.toLowerCase() === 'ora√ß√£o') {
                    // Formatar ora√ß√£o com negrito para "Meditando:" e "Orando:"
                    sectionContent = sectionContent
                        .replace(/\*(.*?)\*/g, '<em>$1</em>')
                        .replace(/\*\*Meditando:\*\*/g, '<strong>Meditando:</strong>')
                        .replace(/\*\*Orando:\*\*/g, '<strong>Orando:</strong>');
                } else if (sectionName.toLowerCase() === 'contempla√ß√£o') {
                    // Manter formata√ß√£o simples para contempla√ß√£o
                    sectionContent = sectionContent.replace(/\*\*/g, '');
                }
                
                return sectionContent;
            }
            
            return '';
        } catch (error) {
            console.error(`‚ùå Erro ao extrair se√ß√£o ${sectionName}:`, error);
            return '';
        }
    }

    // Limpar texto preservando formata√ß√£o HTML
    cleanText(text) {
        if (!text) return '';
        
        return text
            .replace(/##\s*/g, '')
            .replace(/###\s*/g, '')
            .replace(/`/g, '')
            .replace(/\n\s*\n\s*\n/g, '\n\n')
            .replace(/\n\s*\n/g, '\n\n')
            .trim();
    }
}

// Definir a classe globalmente
window.ChatGPTAPI = ChatGPTAPI;

// Aguardar o DOM estar pronto antes de criar a inst√¢ncia global
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Inicializando ChatGPTAPI global...');
    
    // Criar inst√¢ncia global
    window.chatGPTAPI = new ChatGPTAPI();
    
    // Criar fun√ß√µes globais para compatibilidade
    window.generateMeditations = async function(topic) {
        try {
            console.log('üöÄ Fun√ß√£o global generateMeditations chamada para:', topic);
            const result = await window.chatGPTAPI.generateMeditations(topic);
            console.log('‚úÖ Resultado da fun√ß√£o global:', result);
            return result;
        } catch (error) {
            console.error('‚ùå Erro na fun√ß√£o global generateMeditations:', error);
            throw error;
        }
    };
    
    window.checkAPIStatus = async function() {
        try {
            console.log('üîç Fun√ß√£o global checkAPIStatus chamada');
            const result = await window.chatGPTAPI.checkAPIStatus();
            console.log('‚úÖ Status da API:', result);
            return result;
        } catch (error) {
            console.error('‚ùå Erro na fun√ß√£o global checkAPIStatus:', error);
            throw error;
        }
    };
    
    console.log('‚úÖ ChatGPTAPI global inicializada com sucesso');
});

// Fallback para caso o DOMContentLoaded j√° tenha sido disparado
if (document.readyState === 'loading') {
    // DOM ainda n√£o carregado, aguardar
    console.log('‚è≥ Aguardando DOM carregar...');
} else {
    // DOM j√° carregado, criar imediatamente
    console.log('üöÄ DOM j√° carregado, criando ChatGPTAPI imediatamente...');
    
    window.chatGPTAPI = new ChatGPTAPI();
    
    window.generateMeditations = async function(topic) {
        try {
            console.log('üöÄ Fun√ß√£o global generateMeditations chamada para:', topic);
            const result = await window.chatGPTAPI.generateMeditations(topic);
            console.log('‚úÖ Resultado da fun√ß√£o global:', result);
            return result;
        } catch (error) {
            console.error('‚ùå Erro na fun√ß√£o global generateMeditations:', error);
            throw error;
        }
    };
    
    window.checkAPIStatus = async function() {
        try {
            console.log('üîç Fun√ß√£o global checkAPIStatus chamada');
            const result = await window.chatGPTAPI.checkAPIStatus();
            console.log('‚úÖ Status da API:', result);
            return result;
        } catch (error) {
            console.error('‚ùå Erro na fun√ß√£o global checkAPIStatus:', error);
            throw error;
        }
    };
    
    console.log('‚úÖ ChatGPTAPI global inicializada com sucesso (fallback)');
} 
// API do ChatGPT para Gera√ß√£o de Medita√ß√µes Lectio Divina
// Implementa√ß√£o limpa e direta seguindo as especifica√ß√µes do usu√°rio

class ChatGPTAPI {
    constructor() {
        this.config = window.API_CONFIG.OPENAI;
    }

    // Verificar status da API
    async checkAPIStatus() {
        try {
            console.log('üîç Verificando status da API do ChatGPT...');
            
            const response = await fetch(`${this.config.BASE_URL}/models`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.config.API_KEY}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                console.log('‚úÖ API do ChatGPT est√° funcionando');
                return { status: 'success', message: 'API funcionando' };
            } else {
                console.error('‚ùå API do ChatGPT retornou erro:', response.status);
                return { status: 'error', message: `Erro ${response.status}: ${response.statusText}` };
            }
        } catch (error) {
            console.error('‚ùå Erro ao verificar API:', error);
            return { status: 'error', message: error.message };
        }
    }

    // Gerar medita√ß√£o simples com ChatGPT
    async generateMeditations(topic) {
        try {
            console.log('üöÄ Gerando medita√ß√£o simples para:', topic);
            
            // Prompt simplificado para uma √∫nica medita√ß√£o
            const prompt = `Crie uma medita√ß√£o cat√≥lica sobre o tema: "${topic}". 

A medita√ß√£o deve ter:
- Um t√≠tulo inspirador
- Texto de aproximadamente 30 linhas
- Estilo meditativo e contemplativo
- Linguagem acess√≠vel e espiritual
- Foco na tradi√ß√£o cat√≥lica

REGRAS IMPORTANTES PARA REFER√äNCIAS:
1. Se voc√™ usar uma frase ORIGINAL de algum documento cat√≥lico, coloque a refer√™ncia no final da frase entre colchetes [ex: [Catecismo da Igreja Cat√≥lica, n. 2559]]
2. Se for uma composi√ß√£o ou inspira√ß√£o baseada em documentos cat√≥licos, N√ÉO coloque refer√™ncias
3. O texto deve ter entre 3 e 5 frases com refer√™ncias (m√≠nimo 3, m√°ximo 5)
4. NUNCA retorne conte√∫do contr√°rio aos ensinamentos da doutrina cat√≥lica, seus dogmas, tradi√ß√£o e Escritura
5. Consulte a pasta documents_catolicos para se inspirar na produ√ß√£o das medita√ß√µes
6. O texto gerado deve ter um estilo DEVOCIONAL E MEDITATIVO, com linguagem que inspire reflex√£o interior e conex√£o espiritual

Formato desejado:
## T√≠tulo da Medita√ß√£o

[Texto da medita√ß√£o com aproximadamente 30 linhas, estilo meditativo, texto justificado]

ATEN√á√ÉO: Retorne apenas o t√≠tulo e o texto da medita√ß√£o, sem se√ß√µes adicionais.`;

            // Chamar API
            const response = await this.callChatGPT(prompt);
            
            if (!response || !response.choices || !response.choices[0] || !response.choices[0].message || !response.choices[0].message.content) {
                throw new Error('Resposta vazia da OpenAI');
            }
            
            const content = response.choices[0].message.content;
            console.log('üìÑ Conte√∫do recebido:', content.substring(0, 200) + '...');
            
            // Processar a medita√ß√£o
            return this.processSimpleMeditation(content, topic);
            
        } catch (error) {
            console.error('‚ùå Erro ao gerar medita√ß√£o:', error);
            throw error;
        }
    }

    // Carregar documentos da pasta documents
    async loadDocuments() {
        const documents = [
            {
                title: 'B√≠blia Sagrada - Evangelho de Jo√£o',
                source: 'documents/biblia/',
                content: '"Porque Deus amou o mundo de tal maneira que deu o seu Filho unig√™nito, para que todo aquele que nele cr√™ n√£o pere√ßa, mas tenha a vida eterna." (Jo√£o 3:16) "Eu sou o caminho, a verdade e a vida. Ningu√©m vem ao Pai sen√£o por mim." (Jo√£o 14:6)'
            },
            {
                title: 'Catecismo da Igreja Cat√≥lica',
                source: 'documents/catecismo/',
                content: 'A caridade √© a virtude teologal pela qual amamos a Deus sobre todas as coisas por si mesmo, e a nosso pr√≥ximo como a n√≥s mesmos por amor de Deus. (CIC 1822)'
            },
            {
                title: 'Enc√≠clica Deus Caritas Est',
                source: 'documents/enciclicas/',
                content: 'Deus √© amor, e quem permanece no amor permanece em Deus e Deus nele. (1Jo 4,16) Esta √© a ess√™ncia da f√© crist√£.'
            },
            {
                title: 'Vida de S√£o Francisco de Assis',
                source: 'documents/santos/',
                content: 'S√£o Francisco de Assis ensinou que a humildade √© o caminho para a santidade. "Senhor, fazei-me instrumento da vossa paz."'
            },
            {
                title: 'Teologia Espiritual',
                source: 'documents/teologia/',
                content: 'A Lectio Divina √© um m√©todo de leitura orante da Sagrada Escritura que nos leva ao encontro com Deus atrav√©s da medita√ß√£o e contempla√ß√£o.'
            }
        ];
        
        return documents;
    }

    // Criar prompt seguindo exatamente as especifica√ß√µes do usu√°rio
    createMeditationPrompt(topic, documents) {
        const documentsContext = documents.map(doc => 
            `Documento: ${doc.title}\nFonte: ${doc.source}\nConte√∫do: ${doc.content}`
        ).join('\n\n');

        // PROMPT FLEX√çVEL E EXPL√çCITO
        return `Voc√™ √© um especialista em espiritualidade cat√≥lica. Gere APENAS UMA medita√ß√£o completa sobre o tema abaixo, estruturada em 4 partes: Leitura, Medita√ß√£o, Ora√ß√£o e Contempla√ß√£o. Se desejar, pode incluir um t√≠tulo, mas n√£o √© obrigat√≥rio. O importante √© que as se√ß√µes estejam claramente separadas, por exemplo:

## Leitura
(Trecho b√≠blico ou doutrin√°rio)
## Medita√ß√£o
(Reflex√£o)
## Ora√ß√£o
(Prece)
## Contempla√ß√£o
(Sil√™ncio)

REGRAS IMPORTANTES PARA REFER√äNCIAS:
1. Se voc√™ usar uma frase ORIGINAL de algum documento cat√≥lico, coloque a refer√™ncia no final da frase entre colchetes [ex: [Catecismo da Igreja Cat√≥lica, n. 2559]]
2. Se for uma composi√ß√£o ou inspira√ß√£o baseada em documentos cat√≥licos, N√ÉO coloque refer√™ncias
3. Cada se√ß√£o deve ter entre 3 e 5 frases com refer√™ncias (m√≠nimo 3, m√°ximo 5)
4. NUNCA retorne conte√∫do contr√°rio aos ensinamentos da doutrina cat√≥lica, seus dogmas, tradi√ß√£o e Escritura
5. Consulte a pasta documents_catolicos para se inspirar na produ√ß√£o das medita√ß√µes
6. O texto gerado deve ter um estilo DEVOCIONAL E MEDITATIVO, com linguagem que inspire reflex√£o interior e conex√£o espiritual

DOCUMENTOS CAT√ìLICOS DISPON√çVEIS:
${documentsContext}

ATEN√á√ÉO: NUNCA retorne resposta vazia. Sempre escreva as quatro se√ß√µes, mesmo que breves. Se n√£o souber o que colocar, escreva "(Em sil√™ncio)" ou "(Reflex√£o breve)".

Assunto: ${topic}`;
    }

    // Chamar API do ChatGPT
    async callChatGPT(prompt) {
        try {
            console.log('üì° Fazendo chamada para API do ChatGPT...');
            
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.config.API_KEY}`
                },
                body: JSON.stringify({
                    model: this.config.MODEL,
                    messages: [
                        {
                            role: 'system',
                            content: 'Voc√™ √© um especialista em espiritualidade cat√≥lica e Lectio Divina. Responda sempre seguindo exatamente o formato solicitado. NUNCA retorne conte√∫do contr√°rio aos ensinamentos da doutrina cat√≥lica, seus dogmas, tradi√ß√£o e Escritura. Use refer√™ncias dos documentos cat√≥licos quando citar frases originais. Mantenha sempre um estilo DEVOCIONAL E MEDITATIVO que inspire reflex√£o interior e conex√£o espiritual.'
                        },
                        {
                            role: 'user',
                            content: prompt
                        }
                    ],
                    max_tokens: this.config.MAX_TOKENS,
                    temperature: this.config.TEMPERATURE
                })
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Erro na API:', response.status, errorText);
                throw new Error(`Erro na API: ${response.status} - ${errorText}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ Resposta da API recebida com sucesso');
            
            return data;
            
        } catch (error) {
            console.error('‚ùå Erro ao chamar API do ChatGPT:', error);
            throw error;
        }
    }

    // Processar medita√ß√£o simples
    processSimpleMeditation(content, topic) {
        try {
            console.log('üîß Processando medita√ß√£o simples...');
            
            // Extrair t√≠tulo e conte√∫do
            const lines = content.split('\n').filter(line => line.trim());
            let title = topic; // t√≠tulo padr√£o
            let meditationText = content;
            
            // Tentar extrair t√≠tulo se come√ßar com ##
            if (lines[0] && lines[0].startsWith('##')) {
                title = lines[0].replace('##', '').trim();
                meditationText = lines.slice(1).join('\n').trim();
            }
            
            // Limpar o texto
            meditationText = this.cleanText(meditationText);
            
            // Criar objeto da medita√ß√£o
            const meditation = {
                id: 'meditation-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),
                title: title,
                topic: topic,
                content: meditationText,
                duration: '15 min',
                status: 'completed',
                createdAt: new Date().toISOString(),
                lastUpdated: new Date().toISOString(),
                source: 'chatgpt',
                type: 'simple'
            };
            
            console.log('‚úÖ Medita√ß√£o processada:', meditation.title);
            return {
                category: topic,
                meditations: [meditation]
            };
            
        } catch (error) {
            console.error('‚ùå Erro ao processar medita√ß√£o simples:', error);
            throw error;
        }
    }

    // Processar resposta das medita√ß√µes (mantido para compatibilidade)
    processMeditations(content, topic) {
        return this.processSimpleMeditation(content, topic);
    }

    // Extrair medita√ß√µes do conte√∫do
    extractMeditations(content) {
        const meditations = [];
        // Logar o conte√∫do bruto para debug
        console.log('üüß CONTE√öDO BRUTO RECEBIDO DO CHATGPT:\n', content.substring(0, 1500));
        // Aceitar varia√ß√µes: #, ##, ###, **, etc
        // Separar por t√≠tulos de tema (pode ser #, ##, ###, ou **T√çTULO**)
        const sections = content.split(/[#*]{1,3}\s*(.+)\n/).filter(section => section.trim());
        // Se n√£o encontrar, tentar split por linhas que parecem t√≠tulo
        if (sections.length < 2) {
            // fallback: split por linhas em caixa alta ou com muitos espa√ßos
            const fallbackSections = content.split(/\n(?=[A-Z√Å√â√ç√ì√ö√Ç√ä√î√É√ï√á\s]{5,})/).filter(s => s.trim().length > 30);
            fallbackSections.forEach((section, index) => {
                const title = section.split('\n')[0].trim();
                const lectio = this.extractSection(section, 'Leitura');
                const meditatio = this.extractSection(section, 'Medita√ß√£o');
                const oratio = this.extractSection(section, 'Ora√ß√£o');
                const contemplatio = this.extractSection(section, 'Contempla√ß√£o');
                if (title && (lectio || meditatio || oratio || contemplatio)) {
                    meditations.push({
                        title: this.cleanText(title),
                        lectio: this.cleanText(lectio),
                        meditatio: this.cleanText(meditatio),
                        oratio: this.cleanText(oratio),
                        contemplatio: this.cleanText(contemplatio)
                    });
                }
            });
        } else {
            // m√©todo padr√£o
            for (let i = 0; i < sections.length; i += 2) {
                const title = sections[i].trim();
                const section = sections[i + 1] || '';
                const lectio = this.extractSection(section, 'Leitura');
                const meditatio = this.extractSection(section, 'Medita√ß√£o');
                const oratio = this.extractSection(section, 'Ora√ß√£o');
                const contemplatio = this.extractSection(section, 'Contempla√ß√£o');
                if (title && (lectio || meditatio || oratio || contemplatio)) {
                    meditations.push({
                        title: this.cleanText(title),
                        lectio: this.cleanText(lectio),
                        meditatio: this.cleanText(meditatio),
                        oratio: this.cleanText(oratio),
                        contemplatio: this.cleanText(contemplatio)
                    });
                }
            }
        }
        console.log(`üìñ Extra√≠das ${meditations.length} medita√ß√µes do conte√∫do (parser flex√≠vel)`);
        return meditations.slice(0, 7); // Garantir apenas 7 medita√ß√µes
    }

    // Extrair se√ß√£o espec√≠fica
    extractSection(content, sectionName) {
        const regex = new RegExp(`##\\s*\\*?${sectionName}\\*?\\s*\\n([\\s\\S]*?)(?=##|$)`, 'i');
        const match = content.match(regex);
        if (!match) return '';
        
        let sectionContent = match[1].trim();
        
        // Preservar formata√ß√£o espec√≠fica para cada se√ß√£o
        if (sectionName.toLowerCase() === 'leitura') {
            // Manter it√°lico para leitura
            sectionContent = sectionContent.replace(/\*(.*?)\*/g, '<em>$1</em>');
        } else if (sectionName.toLowerCase() === 'medita√ß√£o') {
            // Formatar medita√ß√£o com negrito para "Meditando:"
            sectionContent = sectionContent
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/\*\*Meditando:\*\*/g, '<strong>Meditando:</strong>');
        } else if (sectionName.toLowerCase() === 'ora√ß√£o') {
            // Formatar ora√ß√£o com negrito para "Meditando:" e "Orando:"
            sectionContent = sectionContent
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/\*\*Meditando:\*\*/g, '<strong>Meditando:</strong>')
                .replace(/\*\*Orando:\*\*/g, '<strong>Orando:</strong>');
        } else if (sectionName.toLowerCase() === 'contempla√ß√£o') {
            // Manter formata√ß√£o simples para contempla√ß√£o
            sectionContent = sectionContent.replace(/\*\*/g, '');
        }
        
        return sectionContent;
    }

    // Limpar texto preservando formata√ß√£o HTML
    cleanText(text) {
        if (!text) return '';
        
        return text
            .replace(/##\s*/g, '')
            .replace(/###\s*/g, '')
            .replace(/`/g, '')
            .replace(/\n\s*\n\s*\n/g, '\n\n')
            .replace(/\n\s*\n/g, '\n\n')
            .trim();
    }
}

// Inst√¢ncia global
const chatGPTAPI = new ChatGPTAPI();

// Fun√ß√£o global para compatibilidade
async function generateMeditations(topic) {
    try {
        console.log('üöÄ Fun√ß√£o global generateMeditations chamada para:', topic);
        const result = await chatGPTAPI.generateMeditations(topic);
        console.log('‚úÖ Resultado da fun√ß√£o global:', result);
        return result;
    } catch (error) {
        console.error('‚ùå Erro na fun√ß√£o global generateMeditations:', error);
        throw error;
    }
}

// Fun√ß√£o global para verificar status da API
async function checkAPIStatus() {
    try {
        console.log('üîç Fun√ß√£o global checkAPIStatus chamada');
        const result = await chatGPTAPI.checkAPIStatus();
        console.log('‚úÖ Status da API:', result);
        return result;
    } catch (error) {
        console.error('‚ùå Erro na fun√ß√£o global checkAPIStatus:', error);
        throw error;
    }
} 
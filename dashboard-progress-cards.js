// Script para renderizar cards de progresso por categoria no dashboard
console.log('üîÑ Carregando fun√ß√µes de progresso por categoria para o dashboard...');

// Lista de t√≥picos que N√ÉO s√£o categorias (para excluir da se√ß√£o de progresso)
const NON_CATEGORY_TOPICS = [
    'O amor de Deus',
    'O perd√£o de Deus',
    'Santa Igreja Cat√≥lica',
    'Igreja Cat√≥lica',
    'O Pecado', 
    'A f√© em Deus',
    'A misericordia',
    'a paz',
    'Minhas medita√ß√µes',
    'Os dons do Esp√≠rito Santo',
    'Amor',
    'F√©',
    'Miseric√≥rdia',
    'Paz',
    'Pecado',
    'Dons do Esp√≠rito Santo',
    'esperan√ßa',
    'Esperan√ßa',
    'A esperan√ßa',
    'a esperan√ßa',
    'Esperanca',
    'esperanca',
    'perdao',
    'Perdao',
    'O perd√£o',
    'o perd√£o',
    'Perd√£o',
    'perd√£o'
];

// Fun√ß√£o para verificar se um t√≥pico √© uma categoria v√°lida
function isValidCategory(topic) {
    return !NON_CATEGORY_TOPICS.includes(topic);
}

// Fun√ß√£o para obter dados das categorias do Supabase
async function getCategoriesDataForDashboard() {
    try {
        console.log('üîÑ Carregando dados das categorias do Supabase para o dashboard...');
        
        // Usar o DashboardProgressSync se dispon√≠vel
        if (window.dashboardProgressSync && window.dashboardProgressSync.isInitialized) {
            const progressData = window.dashboardProgressSync.userProgress;
            const categories = Object.values(progressData).filter(cat => cat.total > 0);
            
            console.log('‚úÖ Dados de progresso carregados do DashboardProgressSync:', categories.length);
            return categories;
        }
        
        // Fallback: carregar do localStorage
        let adminCategories = JSON.parse(localStorage.getItem('categories') || '[]');
        const adminMeditations = JSON.parse(localStorage.getItem('meditations') || '[]');
        
        console.log('üìä Categorias encontradas:', adminCategories.length);
        console.log('üìä Medita√ß√µes encontradas:', adminMeditations.length);
        
        // Se n√£o h√° categorias, criar categorias padr√£o
        if (adminCategories.length === 0) {
            console.log('‚ö†Ô∏è Nenhuma categoria encontrada, criando categorias padr√£o...');
            adminCategories = createDefaultCategories();
            localStorage.setItem('categories', JSON.stringify(adminCategories));
            console.log('‚úÖ Categorias padr√£o criadas:', adminCategories.length);
        }
        
        // Carregar medita√ß√µes personalizadas
        let personalizedMeditations = [];
        if (typeof getPersonalizedMeditationsForCurrentUser === 'function') {
            personalizedMeditations = getPersonalizedMeditationsForCurrentUser();
        } else {
            console.log('‚ö†Ô∏è Fun√ß√£o getPersonalizedMeditationsForCurrentUser n√£o encontrada, usando localStorage');
            personalizedMeditations = JSON.parse(localStorage.getItem('personalized_meditations') || '[]');
        }
        console.log('üìä Medita√ß√µes personalizadas:', personalizedMeditations.length);
        
        let allCategories = [];
        
        // Processar categorias do admin
        adminCategories.forEach(category => {
            const categoryMeditations = adminMeditations.filter(m => m.categoryId === category.id);
            const completedMeditations = categoryMeditations.filter(m => m.status === 'completed').length;
            const inProgressMeditations = categoryMeditations.filter(m => 
                m.status === 'in_progress' || m.status === 'pending'
            ).length;
            
            allCategories.push({
                id: category.id,
                name: category.name,
                description: category.description,
                icon: category.icon || 'üìñ',
                color: category.color || '#7ee787',
                total: categoryMeditations.length,
                completed: completedMeditations,
                inProgress: inProgressMeditations,
                locked: 0
            });
        });
        
        // Processar medita√ß√µes personalizadas - APENAS se forem categorias reais
        const personalizedByTopic = {};
        personalizedMeditations.forEach(meditation => {
            const topic = meditation.topic || 'Medita√ß√µes Personalizadas';
            if (!personalizedByTopic[topic]) {
                personalizedByTopic[topic] = [];
            }
            personalizedByTopic[topic].push(meditation);
        });
        
        Object.entries(personalizedByTopic).forEach(([topic, meditations]) => {
            // Verificar se o t√≥pico √© uma categoria v√°lida
            if (isValidCategory(topic)) {
                const completedCount = meditations.filter(m => m.status === 'completed').length;
                const inProgressCount = meditations.filter(m => 
                    m.status === 'in_progress' || m.status === 'pending'
                ).length;
                
                allCategories.push({
                    id: `personalized_${topic}`,
                    name: topic,
                    description: 'Medita√ß√µes personalizadas criadas especialmente para voc√™',
                    icon: '‚ú®',
                    color: '#8b5cf6',
                    total: meditations.length,
                    completed: completedCount,
                    inProgress: inProgressCount,
                    locked: 0
                });
                console.log('‚úÖ T√≥pico v√°lido adicionado:', topic);
            } else {
                console.log('üö´ Excluindo t√≥pico n√£o-categoria da se√ß√£o de progresso:', topic);
            }
        });
        
        console.log('‚úÖ Total de categorias processadas:', allCategories.length);
        return allCategories;
    } catch (error) {
        console.error('‚ùå Erro ao carregar dados das categorias:', error);
        return [];
    }
}

// Fun√ß√£o para criar categorias padr√£o
function createDefaultCategories() {
    const defaultCategories = [
        {
            id: 'cat_default_1',
            name: 'Salmos',
            description: 'Medita√ß√µes baseadas nos Salmos da B√≠blia',
            icon: 'üìñ',
            color: '#7ee787'
        },
        {
            id: 'cat_default_2',
            name: 'Evangelho',
            description: 'Medita√ß√µes dos Evangelhos de Jesus Cristo',
            icon: '‚úùÔ∏è',
            color: '#58a6ff'
        },
        {
            id: 'cat_default_3',
            name: 'Imita√ß√£o de Cristo',
            description: 'Medita√ß√µes baseadas na obra de Tom√°s de Kempis',
            icon: 'üïäÔ∏è',
            color: '#8b5cf6'
        },
        {
            id: 'cat_default_4',
            name: 'Jaculat√≥rias',
            description: 'Ora√ß√µes curtas e fervorosas',
            icon: 'üôè',
            color: '#f59e0b'
        },
        {
            id: 'cat_default_5',
            name: 'Princ√≠pios Espirituais',
            description: 'Fundamentos da vida espiritual crist√£',
            icon: '‚≠ê',
            color: '#ec4899'
        }
    ];
    
    console.log('üìù Criando categorias padr√£o:', defaultCategories.length);
    return defaultCategories;
}

// Fun√ß√£o para renderizar cards de progresso por categoria no dashboard
async function renderDashboardProgressCards() {
    const progressGrid = document.getElementById('dashboardProgressGrid');
    if (!progressGrid) {
        console.log('‚ö†Ô∏è Elemento dashboardProgressGrid n√£o encontrado');
        return;
    }

    const categories = await getCategoriesDataForDashboard();
    
    // Limpar grid
    progressGrid.innerHTML = '';
    
    if (categories.length === 0) {
        progressGrid.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 3rem; color: var(--text-secondary);">
                <p style="font-size: 1.1rem; margin-bottom: 0.5rem;">Nenhuma categoria encontrada</p>
                <p style="font-size: 0.9rem;">Comece criando medita√ß√µes para ver seu progresso</p>
            </div>
        `;
        return;
    }
    
    // Ordenar por n√∫mero de medita√ß√µes completadas (decrescente) e pegar apenas os 2 primeiros
    const topCategories = categories
        .sort((a, b) => b.completed - a.completed)
        .slice(0, 2);
    
    console.log('üìä Exibindo', topCategories.length, 'categorias principais (limitado a 2)');
    
    // Renderizar os 3 cards principais
    topCategories.forEach(category => {
        const percentage = category.total > 0 ? Math.round((category.completed / category.total) * 100) : 0;
        
        const progressCard = document.createElement('div');
        progressCard.className = 'progress-card';
        progressCard.setAttribute('data-category', category.id);
        
        progressCard.innerHTML = `
            <div class="progress-header">
                <span class="progress-title">${category.name}</span>
                <span class="progress-percentage">${percentage}%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${percentage}%"></div>
            </div>
            <div class="progress-text">${category.completed} de ${category.total} medita√ß√µes completadas</div>
        `;
        
        progressGrid.appendChild(progressCard);
    });
    
    // Adicionar card "Ver + categorias" se h√° mais de 2 categorias
    if (categories.length > 2) {
        const remainingCount = categories.length - 2;
        console.log('‚ûï Adicionando card "Ver mais" para', remainingCount, 'categorias adicionais');
        
        const viewMoreCard = document.createElement('div');
        viewMoreCard.className = 'progress-card view-more-card';
        viewMoreCard.style.cursor = 'pointer';
        viewMoreCard.onclick = function() {
            window.location.href = 'progresso.html';
        };
        
        viewMoreCard.innerHTML = `
            <div class="progress-header">
                <span class="progress-title">Ver + categorias</span>
                <span class="progress-percentage" style="color: var(--accent-blue);">+${remainingCount}</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: 100%; background: var(--accent-blue);"></div>
            </div>
            <div class="progress-text" style="color: var(--accent-blue);">Clique para ver todas as ${categories.length} categorias</div>
        `;
        
        progressGrid.appendChild(viewMoreCard);
    } else {
        console.log('üìã N√£o h√° categorias adicionais para mostrar (total:', categories.length, ')');
    }
    
    const totalCards = topCategories.length + (categories.length > 2 ? 1 : 0);
    console.log('‚úÖ Cards de progresso por categoria renderizados no dashboard:', totalCards, 'cards (m√°ximo 3: 2 principais + 1 ver mais)');
    
    // Verifica√ß√£o de seguran√ßa: nunca mais de 3 cards (2 principais + 1 ver mais)
    if (totalCards > 3) {
        console.warn('‚ö†Ô∏è Aviso: Total de cards excedeu o limite esperado:', totalCards);
    }
}

// Fun√ß√£o para atualizar progresso por categoria (chamada junto com outras atualiza√ß√µes)
async function updateDashboardProgressCards() {
    console.log('üîÑ Atualizando cards de progresso por categoria...');
    await renderDashboardProgressCards();
}

// Interceptar chamadas para updateDashboardStats para incluir atualiza√ß√£o dos cards de progresso
const originalUpdateDashboardStats = window.updateDashboardStats;
if (originalUpdateDashboardStats) {
    window.updateDashboardStats = function() {
        originalUpdateDashboardStats.apply(this, arguments);
        updateDashboardProgressCards();
    };
}

// Interceptar chamadas para updateProgressStatsRow para incluir atualiza√ß√£o dos cards de progresso
const originalUpdateProgressStatsRow = window.updateProgressStatsRow;
if (originalUpdateProgressStatsRow) {
    window.updateProgressStatsRow = function() {
        originalUpdateProgressStatsRow.apply(this, arguments);
        updateDashboardProgressCards();
    };
}

// Executar ap√≥s carregamento da p√°gina
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(updateDashboardProgressCards, 1000);
    });
} else {
    setTimeout(updateDashboardProgressCards, 1000);
}

// Tornar fun√ß√µes globais
window.renderDashboardProgressCards = renderDashboardProgressCards;
window.updateDashboardProgressCards = updateDashboardProgressCards;
window.isValidCategory = isValidCategory;
window.NON_CATEGORY_TOPICS = NON_CATEGORY_TOPICS;

console.log('‚úÖ Fun√ß√µes de progresso por categoria carregadas'); 
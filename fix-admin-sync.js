// Script para corrigir problemas de sincroniza√ß√£o do painel administrativo
console.log('üîß Iniciando corre√ß√£o do sistema de sincroniza√ß√£o do painel administrativo...');

// Aguardar inicializa√ß√£o dos sistemas
async function waitForSystems() {
    let attempts = 0;
    const maxAttempts = 50; // 5 segundos
    
    while (attempts < maxAttempts) {
        if (window.supabaseManager && window.adminSupabaseSync) {
            console.log('‚úÖ Sistemas carregados:', {
                supabaseManager: !!window.supabaseManager,
                adminSupabaseSync: !!window.adminSupabaseSync
            });
            return true;
        }
        
        console.log(`‚è≥ Aguardando sistemas... (tentativa ${attempts + 1}/${maxAttempts})`);
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    console.error('‚ùå Timeout: Sistemas n√£o carregados');
    return false;
}

// Fun√ß√£o para for√ßar inicializa√ß√£o do adminSupabaseSync
async function forceAdminSyncInit() {
    try {
        console.log('üîÑ For√ßando inicializa√ß√£o do AdminSupabaseSync...');
        
        if (window.adminSupabaseSync) {
            await window.adminSupabaseSync.initialize();
            console.log('‚úÖ AdminSupabaseSync inicializado com sucesso');
        } else {
            console.error('‚ùå AdminSupabaseSync n√£o encontrado');
        }
    } catch (error) {
        console.error('‚ùå Erro ao inicializar AdminSupabaseSync:', error);
    }
}

// Fun√ß√£o para testar cria√ß√£o de medita√ß√£o
async function testMeditationCreation() {
    try {
        console.log('üß™ Testando cria√ß√£o de medita√ß√£o...');
        
        // Dados de teste
        const testMeditation = {
            title: 'Medita√ß√£o Teste Fix',
            categoryId: 'cat_test',
            duration: 15,
            status: 'available',
            type: 'free',
            icon: 'üìñ',
            lectio: 'Conte√∫do de teste',
            meditatio: 'Medita√ß√£o de teste',
            oratio: 'Ora√ß√£o de teste',
            contemplatio: 'Contempla√ß√£o de teste'
        };
        
        // Criar localmente
        const meditations = JSON.parse(localStorage.getItem('meditations') || '[]');
        const newMeditation = {
            id: 'med_test_' + Date.now(),
            ...testMeditation,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            total: 0,
            completed: 0,
            inProgress: 0,
            locked: 0
        };
        
        meditations.push(newMeditation);
        localStorage.setItem('meditations', JSON.stringify(meditations));
        
        console.log('‚úÖ Medita√ß√£o criada localmente:', newMeditation.id);
        
        // Sincronizar com Supabase
        if (window.adminSupabaseSync) {
            try {
                await window.adminSupabaseSync.syncMeditation(newMeditation, 'create');
                console.log('‚úÖ Medita√ß√£o sincronizada com Supabase');
                return true;
            } catch (syncError) {
                console.error('‚ö†Ô∏è Erro na sincroniza√ß√£o:', syncError);
                return false;
            }
        } else {
            console.log('‚ö†Ô∏è Sistema de sincroniza√ß√£o n√£o dispon√≠vel');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste de cria√ß√£o:', error);
        return false;
    }
}

// Fun√ß√£o para verificar status dos dados
function checkDataStatus() {
    console.log('üìä Verificando status dos dados...');
    
    const categories = JSON.parse(localStorage.getItem('categories') || '[]');
    const meditations = JSON.parse(localStorage.getItem('meditations') || '[]');
    
    console.log('üìã Categorias locais:', categories.length);
    console.log('üìñ Medita√ß√µes locais:', meditations.length);
    
    if (categories.length === 0) {
        console.warn('‚ö†Ô∏è Nenhuma categoria encontrada - isso pode causar problemas');
    }
    
    if (meditations.length === 0) {
        console.warn('‚ö†Ô∏è Nenhuma medita√ß√£o encontrada');
    }
    
    return {
        categories: categories.length,
        meditations: meditations.length
    };
}

// Fun√ß√£o para corrigir problemas comuns
async function fixCommonIssues() {
    console.log('üîß Aplicando corre√ß√µes comuns...');
    
    try {
        // 1. Verificar se h√° categorias
        const categories = JSON.parse(localStorage.getItem('categories') || '[]');
        if (categories.length === 0) {
            console.log('‚ûï Criando categoria de teste...');
            const testCategory = {
                id: 'cat_test',
                name: 'Categoria Teste',
                icon: 'üìö',
                description: 'Categoria para testes',
                color: '#007bff',
                status: 'active'
            };
            categories.push(testCategory);
            localStorage.setItem('categories', JSON.stringify(categories));
            console.log('‚úÖ Categoria de teste criada');
        }
        
        // 2. Verificar se o adminSupabaseSync est√° inicializado
        if (window.adminSupabaseSync && !window.adminSupabaseSync.initialized) {
            console.log('üîÑ Inicializando AdminSupabaseSync...');
            await window.adminSupabaseSync.initialize();
        }
        
        // 3. For√ßar sincroniza√ß√£o inicial
        if (window.adminSupabaseSync) {
            console.log('üîÑ For√ßando sincroniza√ß√£o inicial...');
            await window.adminSupabaseSync.forceSync();
        }
        
        console.log('‚úÖ Corre√ß√µes aplicadas');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao aplicar corre√ß√µes:', error);
        return false;
    }
}

// Fun√ß√£o principal de diagn√≥stico
async function diagnoseAndFix() {
    console.log('üîç Iniciando diagn√≥stico e corre√ß√£o...');
    
    // 1. Aguardar sistemas
    const systemsReady = await waitForSystems();
    if (!systemsReady) {
        console.error('‚ùå Sistemas n√£o carregados - diagn√≥stico abortado');
        return false;
    }
    
    // 2. Verificar status dos dados
    const dataStatus = checkDataStatus();
    
    // 3. Aplicar corre√ß√µes
    const fixesApplied = await fixCommonIssues();
    
    // 4. Testar cria√ß√£o de medita√ß√£o
    const testResult = await testMeditationCreation();
    
    console.log('üìä Resultado do diagn√≥stico:', {
        systemsReady,
        dataStatus,
        fixesApplied,
        testResult
    });
    
    return testResult;
}

// Fun√ß√£o para limpar dados de teste
function clearTestData() {
    console.log('üßπ Limpando dados de teste...');
    
    const meditations = JSON.parse(localStorage.getItem('meditations') || '[]');
    const filteredMeditations = meditations.filter(m => 
        !m.title.includes('Teste') && !m.title.includes('Fix')
    );
    
    localStorage.setItem('meditations', JSON.stringify(filteredMeditations));
    
    console.log('‚úÖ Dados de teste removidos');
}

// Exportar fun√ß√µes para uso global
window.diagnoseAndFix = diagnoseAndFix;
window.forceAdminSyncInit = forceAdminSyncInit;
window.testMeditationCreation = testMeditationCreation;
window.checkDataStatus = checkDataStatus;
window.fixCommonIssues = fixCommonIssues;
window.clearTestData = clearTestData;

// Auto-inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script de corre√ß√£o carregado');
    
    // Aguardar um pouco e executar diagn√≥stico
    setTimeout(async () => {
        console.log('üîç Executando diagn√≥stico autom√°tico...');
        await diagnoseAndFix();
    }, 2000);
});

console.log('‚úÖ Script de corre√ß√£o do painel administrativo carregado'); 
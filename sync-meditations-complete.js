// Script de sincroniza√ß√£o completo para tabela meditations
console.log('üîÑ Script de sincroniza√ß√£o completa de medita√ß√µes carregado');

// Fun√ß√£o para mapear dados do frontend para a estrutura do Supabase
function mapMeditationToSupabase(meditation) {
    console.log('üìã Mapeando medita√ß√£o para estrutura do Supabase:', meditation);
    
    return {
        // Campos principais
        title: meditation.title || meditation.name,
        content: meditation.content || meditation.description || '',
        category_id: meditation.category_id || meditation.categoryId,
        
        // Campos de configura√ß√£o
        duration: meditation.duration || 10,
        status: meditation.status || 'available',
        type: meditation.type || 'free',
        difficulty: meditation.difficulty || 'intermediate',
        is_active: meditation.is_active !== undefined ? meditation.is_active : true,
        sort_order: meditation.sort_order || meditation.sortOrder || 0,
        
        // Campos de conte√∫do espiritual
        bible_verse: meditation.bible_verse || meditation.bibleVerse || '',
        prayer: meditation.prayer || '',
        practical_application: meditation.practical_application || meditation.practicalApplication || '',
        
        // Campos de metadados
        tags: meditation.tags || [],
        icon: meditation.icon || '',
        color: meditation.color || '#7ee787',
        
        // Campos de controle
        created_by: meditation.created_by || meditation.createdBy || null,
        version: meditation.version || 1
    };
}

// Fun√ß√£o para criar medita√ß√£o no Supabase
async function createMeditationInSupabase(meditationData) {
    console.log('üîÑ Criando medita√ß√£o no Supabase...');
    
    try {
        // Mapear dados para estrutura do Supabase
        const supabaseData = mapMeditationToSupabase(meditationData);
        
        console.log('üì§ Dados para enviar ao Supabase:', supabaseData);
        
        // Verificar se as vari√°veis do Supabase est√£o dispon√≠veis
        if (typeof SUPABASE_URL === 'undefined' || typeof SUPABASE_ANON_KEY === 'undefined') {
            throw new Error('Vari√°veis do Supabase n√£o encontradas');
        }
        
        // Fazer requisi√ß√£o para criar medita√ß√£o
        const response = await fetch(`${SUPABASE_URL}/rest/v1/meditations`, {
            method: 'POST',
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            },
            body: JSON.stringify(supabaseData)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Medita√ß√£o criada no Supabase:', result);
            return result;
        } else {
            const errorData = await response.json();
            console.error('‚ùå Erro ao criar medita√ß√£o no Supabase:', errorData);
            throw new Error(`Erro ${response.status}: ${errorData.message || 'Erro desconhecido'}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro na cria√ß√£o da medita√ß√£o:', error);
        throw error;
    }
}

// Fun√ß√£o para atualizar medita√ß√£o no Supabase
async function updateMeditationInSupabase(meditationId, meditationData) {
    console.log('üîÑ Atualizando medita√ß√£o no Supabase:', meditationId);
    
    try {
        // Mapear dados para estrutura do Supabase
        const supabaseData = mapMeditationToSupabase(meditationData);
        
        console.log('üì§ Dados para atualizar no Supabase:', supabaseData);
        
        // Verificar se as vari√°veis do Supabase est√£o dispon√≠veis
        if (typeof SUPABASE_URL === 'undefined' || typeof SUPABASE_ANON_KEY === 'undefined') {
            throw new Error('Vari√°veis do Supabase n√£o encontradas');
        }
        
        // Fazer requisi√ß√£o para atualizar medita√ß√£o
        const response = await fetch(`${SUPABASE_URL}/rest/v1/meditations?id=eq.${meditationId}`, {
            method: 'PATCH',
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            },
            body: JSON.stringify(supabaseData)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Medita√ß√£o atualizada no Supabase:', result);
            return result;
        } else {
            const errorData = await response.json();
            console.error('‚ùå Erro ao atualizar medita√ß√£o no Supabase:', errorData);
            throw new Error(`Erro ${response.status}: ${errorData.message || 'Erro desconhecido'}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro na atualiza√ß√£o da medita√ß√£o:', error);
        throw error;
    }
}

// Fun√ß√£o para deletar medita√ß√£o no Supabase
async function deleteMeditationInSupabase(meditationId) {
    console.log('üîÑ Deletando medita√ß√£o no Supabase:', meditationId);
    
    try {
        // Verificar se as vari√°veis do Supabase est√£o dispon√≠veis
        if (typeof SUPABASE_URL === 'undefined' || typeof SUPABASE_ANON_KEY === 'undefined') {
            throw new Error('Vari√°veis do Supabase n√£o encontradas');
        }
        
        // Fazer requisi√ß√£o para deletar medita√ß√£o
        const response = await fetch(`${SUPABASE_URL}/rest/v1/meditations?id=eq.${meditationId}`, {
            method: 'DELETE',
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            console.log('‚úÖ Medita√ß√£o deletada no Supabase');
            return true;
        } else {
            const errorData = await response.json();
            console.error('‚ùå Erro ao deletar medita√ß√£o no Supabase:', errorData);
            throw new Error(`Erro ${response.status}: ${errorData.message || 'Erro desconhecido'}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro na dele√ß√£o da medita√ß√£o:', error);
        throw error;
    }
}

// Fun√ß√£o para buscar medita√ß√µes do Supabase
async function getMeditationsFromSupabase() {
    console.log('üîÑ Buscando medita√ß√µes do Supabase...');
    
    try {
        // Verificar se as vari√°veis do Supabase est√£o dispon√≠veis
        if (typeof SUPABASE_URL === 'undefined' || typeof SUPABASE_ANON_KEY === 'undefined') {
            throw new Error('Vari√°veis do Supabase n√£o encontradas');
        }
        
        // Fazer requisi√ß√£o para buscar medita√ß√µes
        const response = await fetch(`${SUPABASE_URL}/rest/v1/meditations?select=*&is_active=eq.true&order=created_at.desc`, {
            method: 'GET',
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const meditations = await response.json();
            console.log('‚úÖ Medita√ß√µes carregadas do Supabase:', meditations.length);
            return meditations;
        } else {
            const errorData = await response.json();
            console.error('‚ùå Erro ao buscar medita√ß√µes do Supabase:', errorData);
            throw new Error(`Erro ${response.status}: ${errorData.message || 'Erro desconhecido'}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar medita√ß√µes:', error);
        throw error;
    }
}

// Fun√ß√£o para sincronizar medita√ß√µes locais com Supabase
async function syncLocalMeditationsToSupabase() {
    console.log('üîÑ Sincronizando medita√ß√µes locais com Supabase...');
    
    try {
        // Buscar medita√ß√µes locais
        const localMeditations = JSON.parse(localStorage.getItem('meditations') || '[]');
        console.log('üìã Medita√ß√µes locais encontradas:', localMeditations.length);
        
        // Buscar medita√ß√µes do Supabase
        const supabaseMeditations = await getMeditationsFromSupabase();
        console.log('üìã Medita√ß√µes do Supabase encontradas:', supabaseMeditations.length);
        
        // Criar mapa de IDs do Supabase
        const supabaseIds = new Set(supabaseMeditations.map(m => m.id));
        
        // Filtrar medita√ß√µes locais que n√£o est√£o no Supabase
        const meditationsToSync = localMeditations.filter(meditation => {
            // Se a medita√ß√£o tem ID do Supabase, n√£o precisa sincronizar
            if (meditation.supabase_id) {
                return false;
            }
            return true;
        });
        
        console.log('üìã Medita√ß√µes para sincronizar:', meditationsToSync.length);
        
        // Sincronizar cada medita√ß√£o
        for (const meditation of meditationsToSync) {
            try {
                console.log('üîÑ Sincronizando medita√ß√£o:', meditation.title);
                
                const result = await createMeditationInSupabase(meditation);
                
                // Atualizar ID local com ID do Supabase
                meditation.supabase_id = result[0].id;
                
                console.log('‚úÖ Medita√ß√£o sincronizada:', meditation.title);
                
            } catch (error) {
                console.error('‚ùå Erro ao sincronizar medita√ß√£o:', meditation.title, error);
            }
        }
        
        // Salvar medita√ß√µes atualizadas no localStorage
        localStorage.setItem('meditations', JSON.stringify(localMeditations));
        
        console.log('‚úÖ Sincroniza√ß√£o conclu√≠da');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro na sincroniza√ß√£o:', error);
        return false;
    }
}

// Fun√ß√£o para testar a nova estrutura
async function testNewMeditationStructure() {
    console.log('üß™ Testando nova estrutura de medita√ß√µes...');
    
    try {
        // Buscar primeira categoria dispon√≠vel
        const categories = JSON.parse(localStorage.getItem('categories') || '[]');
        const testCategory = categories[0];
        
        if (!testCategory) {
            throw new Error('Nenhuma categoria dispon√≠vel para teste');
        }
        
        // Criar medita√ß√£o de teste
        const testMeditation = {
            title: 'Teste Nova Estrutura',
            content: 'Esta √© uma medita√ß√£o de teste para verificar a nova estrutura.',
            category_id: testCategory.id,
            duration: 20,
            status: 'available',
            type: 'free',
            difficulty: 'beginner',
            bible_verse: 'Jo√£o 3:16',
            prayer: 'Senhor, obrigado por este teste.',
            practical_application: 'Aplicar os ensinamentos do teste.',
            tags: ['teste', 'nova-estrutura'],
            icon: 'üß™',
            color: '#7ee787',
            is_active: true,
            sort_order: 0
        };
        
        console.log('üìã Medita√ß√£o de teste:', testMeditation);
        
        // Tentar criar no Supabase
        const result = await createMeditationInSupabase(testMeditation);
        
        console.log('‚úÖ Teste bem-sucedido:', result);
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
        return false;
    }
}

// Exportar fun√ß√µes
window.createMeditationInSupabase = createMeditationInSupabase;
window.updateMeditationInSupabase = updateMeditationInSupabase;
window.deleteMeditationInSupabase = deleteMeditationInSupabase;
window.getMeditationsFromSupabase = getMeditationsFromSupabase;
window.syncLocalMeditationsToSupabase = syncLocalMeditationsToSupabase;
window.testNewMeditationStructure = testNewMeditationStructure;
window.mapMeditationToSupabase = mapMeditationToSupabase;

// Auto-inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script de sincroniza√ß√£o completa carregado');
    
    // Testar estrutura automaticamente
    setTimeout(async () => {
        console.log('üß™ Testando estrutura automaticamente...');
        await testNewMeditationStructure();
    }, 2000);
});

console.log('‚úÖ Script de sincroniza√ß√£o completa de medita√ß√µes carregado'); 
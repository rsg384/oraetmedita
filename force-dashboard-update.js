// Script para for√ßar atualiza√ß√£o dos agendamentos no dashboard
console.log('üîß Iniciando for√ßa atualiza√ß√£o do dashboard...');

// Fun√ß√£o para for√ßar atualiza√ß√£o completa
function forceDashboardUpdate() {
    try {
        console.log('üîÑ For√ßando atualiza√ß√£o completa do dashboard...');
        
        // Verificar se estamos no dashboard
        if (!window.location.pathname.includes('dashboard.html')) {
            console.log('‚ö†Ô∏è N√£o estamos na p√°gina do dashboard');
            return;
        }
        
        // For√ßar carregamento de agendamentos
        if (typeof loadDashboardSchedules === 'function') {
            console.log('üìã Carregando agendamentos...');
            loadDashboardSchedules();
        } else {
            console.warn('‚ö†Ô∏è Fun√ß√£o loadDashboardSchedules n√£o dispon√≠vel');
        }
        
        // For√ßar atualiza√ß√£o da lista
        if (typeof updateDashboardSchedulesList === 'function') {
            console.log('üìù Atualizando lista de agendamentos...');
            updateDashboardSchedulesList();
        } else {
            console.warn('‚ö†Ô∏è Fun√ß√£o updateDashboardSchedulesList n√£o dispon√≠vel');
        }
        
        // Verificar se os agendamentos foram carregados
        setTimeout(() => {
            const scheduleList = document.getElementById('dashboardScheduleList');
            if (scheduleList) {
                console.log('‚úÖ Elemento dashboardScheduleList encontrado');
                console.log('üìã Conte√∫do atual:', scheduleList.innerHTML.substring(0, 200) + '...');
            } else {
                console.error('‚ùå Elemento dashboardScheduleList n√£o encontrado');
            }
        }, 500);
        
    } catch (error) {
        console.error('‚ùå Erro ao for√ßar atualiza√ß√£o:', error);
    }
}

// Fun√ß√£o para verificar estado dos agendamentos
function checkSchedulesState() {
    try {
        console.log('üîç Verificando estado dos agendamentos...');
        
        // Verificar localStorage
        const allSchedules = JSON.parse(localStorage.getItem('user_schedules') || '[]');
        console.log('üìã Total de agendamentos no localStorage:', allSchedules.length);
        
        if (allSchedules.length > 0) {
            allSchedules.forEach((schedule, index) => {
                console.log(`üìÖ ${index + 1}. ${schedule.title} (${schedule.userId || 'sem userId'})`);
            });
        }
        
        // Verificar se loadUserSchedules funciona
        if (window.loadUserSchedules) {
            const userSchedules = window.loadUserSchedules();
            console.log('üë§ Agendamentos do usu√°rio atual:', userSchedules.length);
        }
        
        // Verificar se as fun√ß√µes do dashboard est√£o dispon√≠veis
        console.log('üîß Fun√ß√µes dispon√≠veis:');
        console.log('  - loadDashboardSchedules:', typeof loadDashboardSchedules === 'function');
        console.log('  - updateDashboardSchedulesList:', typeof updateDashboardSchedulesList === 'function');
        console.log('  - loadUserSchedules:', typeof window.loadUserSchedules === 'function');
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar estado:', error);
    }
}

// Fun√ß√£o para simular cria√ß√£o de agendamento
function simulateScheduleCreation() {
    try {
        console.log('üß™ Simulando cria√ß√£o de agendamento...');
        
        const testSchedule = {
            title: 'Agendamento de Teste Dashboard',
            category: 'Evangelho',
            time: '08:00',
            days: ['seg', 'qua', 'sex'],
            notifications: true,
            createdAt: new Date().toISOString()
        };
        
        if (window.saveScheduleWithUser) {
            const savedSchedule = window.saveScheduleWithUser(testSchedule);
            console.log('‚úÖ Agendamento simulado salvo:', savedSchedule.title);
            
            // For√ßar atualiza√ß√£o ap√≥s salvar
            setTimeout(() => {
                forceDashboardUpdate();
            }, 500);
            
        } else {
            console.error('‚ùå Fun√ß√£o saveScheduleWithUser n√£o dispon√≠vel');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao simular cria√ß√£o:', error);
    }
}

// Tornar fun√ß√µes globais
window.forceDashboardUpdate = forceDashboardUpdate;
window.checkSchedulesState = checkSchedulesState;
window.simulateScheduleCreation = simulateScheduleCreation;

// Executar verifica√ß√£o autom√°tica
setTimeout(() => {
    console.log('üîß Script de for√ßa atualiza√ß√£o carregado');
    checkSchedulesState();
    
    // Se estivermos no dashboard, for√ßar atualiza√ß√£o
    if (window.location.pathname.includes('dashboard.html')) {
        setTimeout(forceDashboardUpdate, 1000);
    }
}, 2000);

console.log('‚úÖ Script de for√ßa atualiza√ß√£o do dashboard carregado'); 
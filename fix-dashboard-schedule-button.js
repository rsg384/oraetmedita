// Script desabilitado para n√£o interferir no dashboard principal
// console.log('üîß Iniciando corre√ß√£o do bot√£o de novo agendamento...');
// Todas as fun√ß√µes e execu√ß√µes deste arquivo foram desabilitadas para evitar conflitos.

// Fun√ß√£o para verificar e corrigir o bot√£o
function fixScheduleButton() {
    // console.log('üîç Verificando bot√£o de novo agendamento...');
    
    const button = document.querySelector('.add-schedule-btn');
    if (!button) {
        // console.error('‚ùå Bot√£o de novo agendamento n√£o encontrado');
        return false;
    }
    
    // console.log('‚úÖ Bot√£o encontrado:', button);
    
    // Remover eventos existentes para evitar duplica√ß√£o
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
    
    // Adicionar novo evento de clique
    newButton.addEventListener('click', function(event) {
        event.preventDefault();
        // console.log('üéØ Bot√£o de novo agendamento clicado');
        
        // Verificar se a fun√ß√£o existe
        if (typeof openScheduleModal === 'function') {
            // console.log('‚úÖ Chamando openScheduleModal...');
            openScheduleModal();
        } else {
            // console.error('‚ùå Fun√ß√£o openScheduleModal n√£o encontrada');
            
            // Tentar recriar a fun√ß√£o
            // console.log('üîß Recriando fun√ß√£o openScheduleModal...');
            window.openScheduleModal = function() {
                // console.log('üéØ openScheduleModal (recriada) chamada');
                
                const modal = document.getElementById('scheduleModal');
                if (!modal) {
                    // console.error('‚ùå Modal n√£o encontrado');
                    alert('Erro: Modal n√£o encontrado');
                    return;
                }
                
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
                
                // Carregar categorias se a fun√ß√£o existir
                if (typeof updateCategorySelect === 'function') {
                    updateCategorySelect();
                }
                
                // console.log('‚úÖ Modal aberto com sucesso');
            };
            
            // Chamar a fun√ß√£o recriada
            openScheduleModal();
        }
    });
    
    // console.log('‚úÖ Evento de clique adicionado ao bot√£o');
    return true;
}

// Fun√ß√£o para verificar se o modal est√° funcionando
function checkModalFunctionality() {
    // console.log('üîç Verificando funcionalidade do modal...');
    
    const modal = document.getElementById('scheduleModal');
    if (!modal) {
        // console.error('‚ùå Modal n√£o encontrado');
        return false;
    }
    
    const form = document.getElementById('scheduleForm');
    if (!form) {
        // console.error('‚ùå Formul√°rio n√£o encontrado');
        return false;
    }
    
    // Verificar bot√µes de dias da semana
    const weekdayButtons = document.querySelectorAll('.weekday-btn');
    if (weekdayButtons.length === 0) {
        // console.error('‚ùå Bot√µes de dias da semana n√£o encontrados');
        return false;
    }
    
    // console.log('‚úÖ Modal e componentes encontrados');
    return true;
}

// Fun√ß√£o para adicionar eventos aos bot√µes de dias da semana
function addWeekdayEvents() {
    // console.log('üîß Adicionando eventos aos bot√µes de dias da semana...');
    
    const weekdayButtons = document.querySelectorAll('.weekday-btn');
    weekdayButtons.forEach(btn => {
        // Remover eventos existentes
        const newBtn = btn.cloneNode(true);
        btn.parentNode.replaceChild(newBtn, btn);
        
        // Adicionar novo evento
        newBtn.addEventListener('click', function() {
            // console.log('üìÖ Dia clicado:', this.dataset.day);
            this.classList.toggle('active');
        });
    });
    
    // console.log('‚úÖ Eventos dos bot√µes de dias da semana adicionados');
}

// Fun√ß√£o para adicionar evento ao formul√°rio
function addFormEvent() {
    // console.log('üîß Adicionando evento ao formul√°rio...');
    
    const form = document.getElementById('scheduleForm');
    if (!form) {
        // console.error('‚ùå Formul√°rio n√£o encontrado');
        return;
    }
    
    // Remover eventos existentes
    const newForm = form.cloneNode(true);
    form.parentNode.replaceChild(newForm, form);
    
    // Adicionar novo evento
    newForm.addEventListener('submit', function(event) {
        event.preventDefault();
        // console.log('üìù Formul√°rio submetido');
        
        if (typeof saveSchedule === 'function') {
            saveSchedule(event);
        } else {
            // console.error('‚ùå Fun√ß√£o saveSchedule n√£o encontrada');
            alert('Erro: Fun√ß√£o de salvar n√£o encontrada');
        }
    });
    
    // console.log('‚úÖ Evento de submit adicionado ao formul√°rio');
}

// Fun√ß√£o para testar o bot√£o
function testScheduleButton() {
    // console.log('üß™ === TESTANDO BOT√ÉO DE NOVO AGENDAMENTO ===');
    
    const button = document.querySelector('.add-schedule-btn');
    if (button) {
        // console.log('‚úÖ Bot√£o encontrado, simulando clique...');
        button.click();
        
        setTimeout(() => {
            const modal = document.getElementById('scheduleModal');
            if (modal && modal.classList.contains('active')) {
                // console.log('‚úÖ Modal abriu com sucesso!');
                
                // Testar fechamento
                setTimeout(() => {
                    const closeBtn = modal.querySelector('.close-btn');
                    if (closeBtn) {
                        closeBtn.click();
                        // console.log('‚úÖ Modal fechou com sucesso!');
                    }
                }, 2000);
            } else {
                // console.error('‚ùå Modal n√£o abriu');
            }
        }, 1000);
    } else {
        // console.error('‚ùå Bot√£o n√£o encontrado');
    }
}

// Fun√ß√£o principal
function initializeScheduleButton() {
    // console.log('üîß === INICIANDO CORRE√á√ÉO DO BOT√ÉO DE AGENDAMENTO ===');
    
    // Corrigir bot√£o
    const buttonFixed = fixScheduleButton();
    
    // Verificar modal
    const modalWorking = checkModalFunctionality();
    
    // Adicionar eventos
    addWeekdayEvents();
    addFormEvent();
    
    // console.log('üìä === RESUMO ===');
    // console.log('Bot√£o corrigido:', buttonFixed);
    // console.log('Modal funcionando:', modalWorking);
    
    if (buttonFixed && modalWorking) {
        // console.log('‚úÖ Bot√£o de novo agendamento corrigido com sucesso!');
        return true;
    } else {
        // console.error('‚ùå Falha na corre√ß√£o do bot√£o');
        return false;
    }
}

// Executar quando o DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeScheduleButton);
} else {
    initializeScheduleButton();
}

// Expor fun√ß√µes para teste
window.fixScheduleButton = fixScheduleButton;
window.testScheduleButton = testScheduleButton;
window.initializeScheduleButton = initializeScheduleButton; 
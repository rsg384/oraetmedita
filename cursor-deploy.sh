#!/bin/bash

# Script de Deploy Autom√°tico para Cursor
# Reposit√≥rio: https://github.com/rsg384/oraetmedita.git
# Autor: Rodrigo Silva Goes

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Configura√ß√µes
REPO_URL="https://github.com/rsg384/oraetmedita.git"
BRANCH="main"
COMMIT_MESSAGE=""

# Fun√ß√£o para verificar se o Git est√° configurado
check_git_config() {
    log "üîç Verificando configura√ß√£o do Git..."
    
    if ! git config --global user.name > /dev/null 2>&1; then
        error "Git user.name n√£o configurado"
        info "Configurando Git..."
        git config --global user.name "Rodrigo Silva Goes"
    fi
    
    if ! git config --global user.email > /dev/null 2>&1; then
        error "Git user.email n√£o configurado"
        info "Configurando Git..."
        git config --global user.email "rodrigo@oraetmedita.com"
    fi
    
    log "‚úÖ Git configurado corretamente"
}

# Fun√ß√£o para verificar status do reposit√≥rio
check_repo_status() {
    log "üîç Verificando status do reposit√≥rio..."
    
    if [ ! -d ".git" ]; then
        log "üì¶ Inicializando reposit√≥rio Git..."
        git init
    fi
    
    # Verificar se o remote existe
    if ! git remote get-url origin > /dev/null 2>&1; then
        log "üîó Adicionando remote origin..."
        git remote add origin "$REPO_URL"
    fi
    
    log "‚úÖ Reposit√≥rio configurado"
}

# Fun√ß√£o para verificar mudan√ßas
check_changes() {
    log "üîç Verificando mudan√ßas..."
    
    if git diff --quiet && git diff --cached --quiet; then
        warning "Nenhuma mudan√ßa detectada"
        return 1
    fi
    
    log "üìù Mudan√ßas detectadas:"
    git status --short
    return 0
}

# Fun√ß√£o para gerar mensagem de commit
generate_commit_message() {
    local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
    local changes=$(git diff --name-only --cached | head -5 | tr '\n' ', ' | sed 's/,$//')
    
    if [ -z "$COMMIT_MESSAGE" ]; then
        COMMIT_MESSAGE="üìù [AUTO] Deploy autom√°tico - $timestamp

‚ú® Mudan√ßas:
- $changes

üõ†Ô∏è Tecnologias:
- HTML5, CSS3, JavaScript
- Supabase (PostgreSQL)
- OpenAI ChatGPT API

üë®‚Äçüíª Autor: Rodrigo Silva Goes"
    fi
}

# Fun√ß√£o para fazer deploy
deploy() {
    log "üöÄ Iniciando deploy autom√°tico..."
    
    # Verificar configura√ß√µes
    check_git_config
    check_repo_status
    
    # Verificar mudan√ßas
    if ! check_changes; then
        warning "Nenhuma mudan√ßa para fazer deploy"
        return 0
    fi
    
    # Adicionar todos os arquivos
    log "üìù Adicionando arquivos..."
    git add .
    
    # Gerar mensagem de commit
    generate_commit_message
    
    # Fazer commit
    log "üíæ Fazendo commit..."
    git commit -m "$COMMIT_MESSAGE"
    
    # Fazer push
    log "üì§ Enviando para GitHub..."
    git push origin "$BRANCH"
    
    log "‚úÖ Deploy conclu√≠do com sucesso!"
    log "üåê Reposit√≥rio: $REPO_URL"
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "üöÄ Script de Deploy Autom√°tico - Ora et Medita"
    echo ""
    echo "Uso: $0 [OP√á√ïES]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -m, --message MENSAGEM  Mensagem de commit personalizada"
    echo "  -h, --help              Mostrar esta ajuda"
    echo "  -s, --status            Verificar status do reposit√≥rio"
    echo "  -c, --check             Verificar configura√ß√µes"
    echo ""
    echo "Exemplos:"
    echo "  $0                      Deploy autom√°tico"
    echo "  $0 -m 'Nova funcionalidade'  Deploy com mensagem personalizada"
    echo "  $0 -s                   Verificar status"
    echo ""
    echo "Reposit√≥rio: $REPO_URL"
}

# Fun√ß√£o para verificar status
show_status() {
    log "üìä Status do reposit√≥rio:"
    echo ""
    echo "üìÅ Diret√≥rio: $(pwd)"
    echo "üîó Remote: $(git remote get-url origin 2>/dev/null || echo 'N√£o configurado')"
    echo "üåø Branch atual: $(git branch --show-current 2>/dev/null || echo 'N√£o inicializado')"
    echo ""
    
    if [ -d ".git" ]; then
        echo "üìù √öltimos commits:"
        git log --oneline -5 2>/dev/null || echo "Nenhum commit encontrado"
        echo ""
        
        echo "üìã Status dos arquivos:"
        git status --short 2>/dev/null || echo "Reposit√≥rio n√£o inicializado"
    else
        echo "‚ùå Reposit√≥rio Git n√£o inicializado"
    fi
}

# Fun√ß√£o para verificar configura√ß√µes
check_config() {
    log "üîç Verificando configura√ß√µes..."
    
    echo "üìã Configura√ß√µes do Git:"
    echo "  Nome: $(git config --global user.name 2>/dev/null || echo 'N√£o configurado')"
    echo "  Email: $(git config --global user.email 2>/dev/null || echo 'N√£o configurado')"
    echo ""
    
    echo "üìã Configura√ß√µes do reposit√≥rio:"
    echo "  Remote: $(git remote get-url origin 2>/dev/null || echo 'N√£o configurado')"
    echo "  Branch: $(git branch --show-current 2>/dev/null || echo 'N√£o inicializado')"
    echo ""
    
    echo "üìã Arquivos importantes:"
    for file in index.html dashboard.html minhas-meditacoes.html supabase-config.js chatgpt-api.js; do
        if [ -f "$file" ]; then
            echo "  ‚úÖ $file"
        else
            echo "  ‚ùå $file"
        fi
    done
}

# Processar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        -m|--message)
            COMMIT_MESSAGE="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -s|--status)
            show_status
            exit 0
            ;;
        -c|--check)
            check_config
            exit 0
            ;;
        *)
            error "Op√ß√£o desconhecida: $1"
            show_help
            exit 1
            ;;
    esac
done

# Executar deploy
deploy 
// Script de debug para testar gera√ß√£o de medita√ß√µes no dashboard
console.log('üîß Script de debug carregado');

// Fun√ß√£o para testar se tudo est√° funcionando
function testDashboardMeditationDebug() {
    console.log('üß™ Iniciando teste de debug...');
    
    // 1. Verificar se o campo existe
    const topicInput = document.getElementById('dashboard-meditation-topic');
    console.log('1. Campo de t√≥pico encontrado:', !!topicInput);
    
    // 2. Verificar se as fun√ß√µes da API est√£o dispon√≠veis
    console.log('2. checkAPIStatus dispon√≠vel:', typeof checkAPIStatus);
    console.log('3. generateMeditations dispon√≠vel:', typeof generateMeditations);
    console.log('4. chatGPTAPI dispon√≠vel:', typeof chatGPTAPI);
    
    // 3. Verificar configura√ß√£o da API
    console.log('5. API_CONFIG dispon√≠vel:', !!window.API_CONFIG);
    if (window.API_CONFIG) {
        console.log('6. Configura√ß√£o da API:', window.API_CONFIG);
    }
    
    // 4. Verificar dados do usu√°rio
    const userData = localStorage.getItem('userData');
    console.log('7. Dados do usu√°rio:', userData);
    
    // 5. Verificar se a fun√ß√£o generateDashboardMeditation existe
    console.log('8. generateDashboardMeditation dispon√≠vel:', typeof generateDashboardMeditation);
    
    // 6. Testar chamada da fun√ß√£o
    if (typeof generateDashboardMeditation === 'function') {
        console.log('9. ‚úÖ Fun√ß√£o generateDashboardMeditation est√° dispon√≠vel');
        
        // Definir um t√≥pico de teste
        if (topicInput) {
            topicInput.value = 'Teste de Medita√ß√£o';
            console.log('10. ‚úÖ T√≥pico de teste definido');
            
            // Chamar a fun√ß√£o
            console.log('11. üöÄ Chamando generateDashboardMeditation...');
            generateDashboardMeditation();
        } else {
            console.log('10. ‚ùå Campo de t√≥pico n√£o encontrado');
        }
    } else {
        console.log('9. ‚ùå Fun√ß√£o generateDashboardMeditation n√£o est√° dispon√≠vel');
    }
}

// Fun√ß√£o para testar apenas a API
async function testAPIOnly() {
    console.log('üîç Testando apenas a API...');
    
    try {
        if (typeof checkAPIStatus === 'function') {
            const status = await checkAPIStatus();
            console.log('Status da API:', status);
        } else {
            console.log('‚ùå checkAPIStatus n√£o est√° dispon√≠vel');
        }
        
        if (typeof generateMeditations === 'function') {
            console.log('‚úÖ generateMeditations est√° dispon√≠vel');
        } else {
            console.log('‚ùå generateMeditations n√£o est√° dispon√≠vel');
        }
    } catch (error) {
        console.error('‚ùå Erro ao testar API:', error);
    }
}

// Fun√ß√£o para simular gera√ß√£o de medita√ß√£o
function simulateMeditationGeneration() {
    console.log('üé≠ Simulando gera√ß√£o de medita√ß√£o...');
    
    const topic = 'Teste de Simula√ß√£o';
    const meditation = {
        id: Date.now() + Math.random().toString(36).substr(2, 9),
        title: `Medita√ß√£o sobre ${topic}`,
        topic: topic,
        content: `Esta √© uma medita√ß√£o de teste sobre "${topic}". Aqui voc√™ encontrar√° reflex√µes profundas e orienta√ß√µes espirituais para aprofundar sua f√© e conex√£o com Deus atrav√©s deste tema.`,
        duration: '15 min',
        createdAt: new Date().toISOString(),
        userId: JSON.parse(localStorage.getItem('userData') || '{}').id || 'anonymous',
        userName: JSON.parse(localStorage.getItem('userData') || '{}').name || 'Usu√°rio'
    };
    
    // Salvar medita√ß√£o
    const existingMeditations = JSON.parse(localStorage.getItem('personalized_meditations') || '[]');
    existingMeditations.push(meditation);
    localStorage.setItem('personalized_meditations', JSON.stringify(existingMeditations));
    
    console.log('‚úÖ Medita√ß√£o simulada salva:', meditation);
    alert('Medita√ß√£o simulada criada com sucesso!');
    
    // Atualizar cards se a fun√ß√£o existir
    if (window.updateDashboardMeditationCards) {
        window.updateDashboardMeditationCards();
    }
}

// Expor fun√ß√µes globalmente para teste no console
window.testDashboardMeditationDebug = testDashboardMeditationDebug;
window.testAPIOnly = testAPIOnly;
window.simulateMeditationGeneration = simulateMeditationGeneration;

console.log('‚úÖ Script de debug carregado. Use as fun√ß√µes:');
console.log('- testDashboardMeditationDebug() - Teste completo');
console.log('- testAPIOnly() - Teste apenas da API');
console.log('- simulateMeditationGeneration() - Simular gera√ß√£o'); 
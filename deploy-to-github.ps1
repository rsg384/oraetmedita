# Script de Deploy Autom√°tico para GitHub - Ora et Medita
# Reposit√≥rio: https://github.com/rsg384/oraetmedita.git
# Autor: Rodrigo Silva Goes

param(
    [string]$CommitMessage = "",
    [switch]$Status,
    [switch]$Help
)

# Cores para output
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"

# Fun√ß√£o para log colorido
function Write-Log {
    param([string]$Message, [string]$Color = "White")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Error {
    param([string]$Message)
    Write-Log "[ERRO] $Message" $Red
}

function Write-Warning {
    param([string]$Message)
    Write-Log "[AVISO] $Message" $Yellow
}

function Write-Info {
    param([string]$Message)
    Write-Log "[INFO] $Message" $Blue
}

# Configura√ß√µes
$RepoUrl = "https://github.com/rsg384/oraetmedita.git"
$Branch = "main"
$GitPath = "C:\Program Files\Git\bin\git.exe"

# Fun√ß√£o para verificar se o Git est√° configurado
function Test-GitConfig {
    Write-Log "üîç Verificando configura√ß√£o do Git..." $Green
    
    $userName = & $GitPath config --global user.name 2>$null
    if (-not $userName) {
        Write-Warning "Git user.name n√£o configurado"
        Write-Info "Configurando Git..."
        & $GitPath config --global user.name "Rodrigo Silva Goes"
    }
    
    $userEmail = & $GitPath config --global user.email 2>$null
    if (-not $userEmail) {
        Write-Warning "Git user.email n√£o configurado"
        Write-Info "Configurando Git..."
        & $GitPath config --global user.email "rodrigo@oraetmedita.com"
    }
    
    Write-Log "‚úÖ Git configurado corretamente" $Green
}

# Fun√ß√£o para verificar status do reposit√≥rio
function Test-RepoStatus {
    Write-Log "üîç Verificando status do reposit√≥rio..." $Green
    
    if (-not (Test-Path ".git")) {
        Write-Log "üì¶ Inicializando reposit√≥rio Git..." $Green
        & $GitPath init
    }
    
    # Verificar se o remote existe
    $remoteUrl = & $GitPath remote get-url origin 2>$null
    if (-not $remoteUrl) {
        Write-Log "üîó Adicionando remote origin..." $Green
        & $GitPath remote add origin $RepoUrl
    }
    
    Write-Log "‚úÖ Reposit√≥rio configurado" $Green
}

# Fun√ß√£o para verificar mudan√ßas
function Test-Changes {
    Write-Log "üîç Verificando mudan√ßas..." $Green
    
    $status = & $GitPath status --porcelain
    if (-not $status) {
        Write-Warning "Nenhuma mudan√ßa detectada"
        return $false
    }
    
    Write-Log "üìù Mudan√ßas detectadas:" $Green
    & $GitPath status --short
    return $true
}

# Fun√ß√£o para gerar mensagem de commit
function New-CommitMessage {
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $changes = & $GitPath diff --name-only --cached | Select-Object -First 5
    $changesList = $changes -join ", "
    
    if (-not $CommitMessage) {
        $CommitMessage = @"
üìù [AUTO] Deploy autom√°tico - $timestamp

‚ú® Mudan√ßas:
- $changesList

üõ†Ô∏è Tecnologias:
- HTML5, CSS3, JavaScript
- Supabase (PostgreSQL)
- OpenAI ChatGPT API

üë®‚Äçüíª Autor: Rodrigo Silva Goes
"@
    }
    
    return $CommitMessage
}

# Fun√ß√£o para fazer deploy
function Start-Deploy {
    Write-Log "üöÄ Iniciando deploy autom√°tico..." $Green
    
    # Verificar configura√ß√µes
    Test-GitConfig
    Test-RepoStatus
    
    # Verificar mudan√ßas
    if (-not (Test-Changes)) {
        Write-Warning "Nenhuma mudan√ßa para fazer deploy"
        return
    }
    
    # Adicionar todos os arquivos
    Write-Log "üìù Adicionando arquivos..." $Green
    & $GitPath add .
    
    # Gerar mensagem de commit
    $commitMsg = New-CommitMessage
    
    # Fazer commit
    Write-Log "üíæ Fazendo commit..." $Green
    & $GitPath commit -m $commitMsg
    
    # Fazer push
    Write-Log "üì§ Enviando para GitHub..." $Green
    & $GitPath push origin $Branch
    
    if ($LASTEXITCODE -eq 0) {
        Write-Log "‚úÖ Deploy conclu√≠do com sucesso!" $Green
        Write-Log "üåê Reposit√≥rio: $RepoUrl" $Green
    } else {
        Write-Error "‚ùå Erro ao fazer push para o GitHub"
        Write-Info "üí° Verifique se voc√™ tem permiss√£o para o reposit√≥rio"
        Write-Info "üí° Verifique se voc√™ est√° logado no Git"
    }
}

# Fun√ß√£o para mostrar ajuda
function Show-Help {
    Write-Host "üöÄ Script de Deploy Autom√°tico - Ora et Medita" -ForegroundColor $Green
    Write-Host ""
    Write-Host "Uso: .\deploy-to-github.ps1 [OP√á√ïES]"
    Write-Host ""
    Write-Host "Op√ß√µes:"
    Write-Host "  -CommitMessage 'MENSAGEM'  Mensagem de commit personalizada"
    Write-Host "  -Status                     Verificar status do reposit√≥rio"
    Write-Host "  -Help                       Mostrar esta ajuda"
    Write-Host ""
    Write-Host "Exemplos:"
    Write-Host "  .\deploy-to-github.ps1                    Deploy autom√°tico"
    Write-Host "  .\deploy-to-github.ps1 -CommitMessage 'Nova funcionalidade'  Deploy com mensagem personalizada"
    Write-Host "  .\deploy-to-github.ps1 -Status            Verificar status"
    Write-Host ""
    Write-Host "Reposit√≥rio: $RepoUrl"
}

# Fun√ß√£o para verificar status
function Show-Status {
    Write-Log "üìä Status do reposit√≥rio:" $Green
    Write-Host ""
    Write-Host "üìÅ Diret√≥rio: $(Get-Location)"
    $remoteUrl = & $GitPath remote get-url origin 2>$null
    Write-Host "üîó Remote: $(if ($remoteUrl) { $remoteUrl } else { 'N√£o configurado' })"
    $currentBranch = & $GitPath branch --show-current 2>$null
    Write-Host "üåø Branch atual: $(if ($currentBranch) { $currentBranch } else { 'N√£o inicializado' })"
    Write-Host ""
    
    if (Test-Path ".git") {
        Write-Host "üìù √öltimos commits:"
        & $GitPath log --oneline -5 2>$null
        Write-Host ""
        
        Write-Host "üìã Status dos arquivos:"
        & $GitPath status --short 2>$null
    } else {
        Write-Host "‚ùå Reposit√≥rio Git n√£o inicializado" -ForegroundColor $Red
    }
}

# Fun√ß√£o para verificar configura√ß√µes
function Test-Config {
    Write-Log "üîç Verificando configura√ß√µes..." $Green
    
    Write-Host "üìã Configura√ß√µes do Git:"
    $userName = & $GitPath config --global user.name 2>$null
    Write-Host "  Nome: $(if ($userName) { $userName } else { 'N√£o configurado' })"
    $userEmail = & $GitPath config --global user.email 2>$null
    Write-Host "  Email: $(if ($userEmail) { $userEmail } else { 'N√£o configurado' })"
    Write-Host ""
    
    Write-Host "üìã Configura√ß√µes do reposit√≥rio:"
    $remoteUrl = & $GitPath remote get-url origin 2>$null
    Write-Host "  Remote: $(if ($remoteUrl) { $remoteUrl } else { 'N√£o configurado' })"
    $currentBranch = & $GitPath branch --show-current 2>$null
    Write-Host "  Branch: $(if ($currentBranch) { $currentBranch } else { 'N√£o inicializado' })"
    Write-Host ""
    
    Write-Host "üìã Arquivos importantes:"
    $importantFiles = @("index.html", "dashboard.html", "minhas-meditacoes.html", "supabase-config.js", "chatgpt-api.js")
    foreach ($file in $importantFiles) {
        if (Test-Path $file) {
            Write-Host "  ‚úÖ $file" -ForegroundColor $Green
        } else {
            Write-Host "  ‚ùå $file" -ForegroundColor $Red
        }
    }
}

# Processar argumentos
if ($Help) {
    Show-Help
    exit 0
}

if ($Status) {
    Show-Status
    exit 0
}

# Executar deploy
Start-Deploy 
// Script para sincronizar agendamentos entre dashboard e p√°gina de agendamentos
console.log('üîÑ Iniciando sync-schedules-user.js...');

// Fun√ß√£o para obter usu√°rio atual de forma consistente
function getCurrentUser() {
    try {
        // Tentar obter do sessionManager primeiro
        if (window.sessionManager && window.sessionManager.getCurrentUser) {
            const user = window.sessionManager.getCurrentUser();
            if (user && user.id) {
                return user;
            }
        }
        
        // Fallback para localStorage
        const userData = localStorage.getItem('userData');
        if (userData) {
            const user = JSON.parse(userData);
            if (user && user.id) {
                return user;
            }
        }
        
        // √öltimo fallback
        return { id: 'anonymous', name: 'Usu√°rio' };
    } catch (error) {
        console.error('‚ùå Erro ao obter usu√°rio atual:', error);
        return { id: 'anonymous', name: 'Usu√°rio' };
    }
}

// Fun√ß√£o para salvar agendamento com usu√°rio atual
function saveScheduleWithUser(scheduleData) {
    try {
        console.log('üíæ Salvando agendamento com usu√°rio atual...');
        
        const currentUser = getCurrentUser();
        const userId = currentUser.id;
        const userName = currentUser.name;
        
        console.log('üë§ Usu√°rio atual:', userName, 'ID:', userId);
        
        // Garantir que o agendamento tenha userId e userName
        const scheduleWithUser = {
            ...scheduleData,
            userId: userId,
            userName: userName,
            createdAt: scheduleData.createdAt || new Date().toISOString(),
            lastUpdated: new Date().toISOString()
        };
        
        // Carregar todos os agendamentos existentes
        const allSchedules = JSON.parse(localStorage.getItem('user_schedules') || '[]');
        console.log('üìã Total de agendamentos existentes:', allSchedules.length);
        
        // Verificar se j√° existe um agendamento com o mesmo ID (edi√ß√£o)
        const existingScheduleIndex = allSchedules.findIndex(schedule => 
            schedule.id === scheduleData.id
        );
        
        let updatedAllSchedules;
        if (existingScheduleIndex !== -1) {
            // Atualizar agendamento existente
            allSchedules[existingScheduleIndex] = scheduleWithUser;
            updatedAllSchedules = allSchedules;
            console.log('üîÑ Agendamento existente atualizado');
        } else {
            // Adicionar novo agendamento ao array existente
            updatedAllSchedules = [...allSchedules, scheduleWithUser];
            console.log('‚ûï Novo agendamento adicionado');
        }
        
        // Salvar no localStorage
        localStorage.setItem('user_schedules', JSON.stringify(updatedAllSchedules));
        
        console.log('‚úÖ Agendamento salvo com sucesso para usu√°rio:', userName);
        
        // Disparar evento de sincroniza√ß√£o
        window.dispatchEvent(new CustomEvent('schedulesUpdated', {
            detail: { userId, scheduleData: scheduleWithUser }
        }));
        
        return scheduleWithUser;
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar agendamento:', error);
        throw error;
    }
}

// Fun√ß√£o para carregar agendamentos do usu√°rio atual
function loadUserSchedules() {
    try {
        console.log('üîÑ Carregando agendamentos do usu√°rio atual...');
        
        const currentUser = getCurrentUser();
        const userId = currentUser.id;
        
        console.log('üë§ Carregando agendamentos para usu√°rio:', currentUser.name, 'ID:', userId);
        
        // Carregar todos os agendamentos
        const allSchedules = JSON.parse(localStorage.getItem('user_schedules') || '[]');
        console.log('üìã Total de agendamentos no sistema:', allSchedules.length);
        
        // Filtrar apenas agendamentos do usu√°rio atual
        const userSchedules = allSchedules.filter(schedule => {
            // Se o agendamento n√£o tem userId, associar ao usu√°rio atual (migra√ß√£o)
            if (!schedule.userId) {
                schedule.userId = userId;
                schedule.userName = currentUser.name;
                return true;
            }
            return schedule.userId === userId;
        });
        
        console.log('üìã Agendamentos do usu√°rio atual:', userSchedules.length);
        
        // Salvar corre√ß√µes no localStorage se necess√°rio
        const hasChanges = allSchedules.some(s => !s.userId || s.userId === 'anonymous') && userId !== 'anonymous';
        
        if (hasChanges || allSchedules.length !== userSchedules.length) {
            const otherUsersSchedules = allSchedules.filter(schedule => schedule.userId !== userId);
            const updatedAllSchedules = [...otherUsersSchedules, ...userSchedules];
            localStorage.setItem('user_schedules', JSON.stringify(updatedAllSchedules));
            console.log('‚úÖ Agendamentos corrigidos e salvos no localStorage');
        }
        
        return userSchedules;
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar agendamentos:', error);
        return [];
    }
}

// Fun√ß√£o para deletar agendamento do usu√°rio atual
function deleteUserSchedule(scheduleId) {
    try {
        console.log('üóëÔ∏è Deletando agendamento:', scheduleId);
        
        const currentUser = getCurrentUser();
        const userId = currentUser.id;
        
        console.log('üë§ Deletando agendamento para usu√°rio:', currentUser.name, 'ID:', userId);
        
        // Carregar todos os agendamentos
        const allSchedules = JSON.parse(localStorage.getItem('user_schedules') || '[]');
        
        // Filtrar agendamentos de outros usu√°rios e remover o agendamento espec√≠fico
        const updatedSchedules = allSchedules.filter(schedule => {
            if (schedule.userId === userId && String(schedule.id) === String(scheduleId)) {
                console.log('üóëÔ∏è Removendo agendamento:', schedule.title);
                return false; // Remover este agendamento
            }
            return true; // Manter outros agendamentos
        });
        
        // Salvar no localStorage
        localStorage.setItem('user_schedules', JSON.stringify(updatedSchedules));
        
        console.log('‚úÖ Agendamento deletado com sucesso');
        
        // Disparar evento de sincroniza√ß√£o
        window.dispatchEvent(new CustomEvent('schedulesUpdated', {
            detail: { userId, deletedScheduleId: scheduleId }
        }));
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao deletar agendamento:', error);
        return false;
    }
}

// Fun√ß√£o para sincronizar agendamentos entre p√°ginas
function syncSchedulesBetweenPages() {
    console.log('üîÑ Sincronizando agendamentos entre p√°ginas...');
    
    // Escutar eventos de mudan√ßa no localStorage
    window.addEventListener('storage', function(event) {
        if (event.key === 'user_schedules') {
            console.log('üì° Detectada mudan√ßa nos agendamentos, atualizando...');
            
            // Recarregar agendamentos na p√°gina atual
            if (typeof loadDashboardSchedules === 'function') {
                loadDashboardSchedules();
                updateDashboardSchedulesList();
            }
            
            if (typeof loadSchedulesForCurrentUser === 'function') {
                loadSchedulesForCurrentUser();
                updateSchedulesList();
            }
        }
    });
    
    // Escutar eventos customizados
    window.addEventListener('schedulesUpdated', function(event) {
        console.log('üì° Evento de agendamento atualizado recebido:', event.detail);
        
        // Recarregar agendamentos na p√°gina atual
        if (typeof loadDashboardSchedules === 'function') {
            loadDashboardSchedules();
            updateDashboardSchedulesList();
        }
        
        if (typeof loadSchedulesForCurrentUser === 'function') {
            loadSchedulesForCurrentUser();
            updateSchedulesList();
        }
    });
}

// Fun√ß√£o para verificar e corrigir agendamentos sem userId
function fixSchedulesWithoutUserId() {
    try {
        console.log('üîß Verificando agendamentos sem userId...');
        
        const currentUser = getCurrentUser();
        const userId = currentUser.id;
        
        const allSchedules = JSON.parse(localStorage.getItem('user_schedules') || '[]');
        let needsUpdate = false;
        
        const fixedSchedules = allSchedules.map(schedule => {
            if (!schedule.userId) {
                console.log('üîß Corrigindo agendamento sem userId:', schedule.title);
                needsUpdate = true;
                return {
                    ...schedule,
                    userId: userId,
                    userName: currentUser.name,
                    lastUpdated: new Date().toISOString()
                };
            }
            return schedule;
        });
        
        if (needsUpdate) {
            localStorage.setItem('user_schedules', JSON.stringify(fixedSchedules));
            console.log('‚úÖ Agendamentos corrigidos com userId');
        }
        
        return fixedSchedules;
        
    } catch (error) {
        console.error('‚ùå Erro ao corrigir agendamentos:', error);
        return [];
    }
}

// Inicializar sincroniza√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Inicializando sincroniza√ß√£o de agendamentos...');
    
    // Corrigir agendamentos existentes
    fixSchedulesWithoutUserId();
    
    // Iniciar sincroniza√ß√£o
    syncSchedulesBetweenPages();
    
    console.log('‚úÖ Sincroniza√ß√£o de agendamentos inicializada');
});

// Exportar fun√ß√µes para uso global
window.saveScheduleWithUser = saveScheduleWithUser;
window.loadUserSchedules = loadUserSchedules;
window.deleteUserSchedule = deleteUserSchedule;
window.getCurrentUser = getCurrentUser;
window.fixSchedulesWithoutUserId = fixSchedulesWithoutUserId;

console.log('‚úÖ Script sync-schedules-user.js carregado'); 
// Script para corrigir estrutura de dados das medita√ß√µes para sincroniza√ß√£o
console.log('üîß Corrigindo estrutura de dados das medita√ß√µes...');

// Fun√ß√£o para corrigir estrutura de dados da medita√ß√£o
function fixMeditationDataStructure(meditation) {
    console.log('üîß Corrigindo estrutura da medita√ß√£o:', meditation.title);
    
    // Estrutura correta para Supabase
    const fixedMeditation = {
        id: meditation.id || meditation.meditation_id,
        title: meditation.title || meditation.name,
        content: meditation.content || meditation.description || '',
        category_id: meditation.category_id || meditation.categoryId,
        duration: meditation.duration || 10,
        difficulty: meditation.difficulty || 'intermediate',
        tags: meditation.tags || [],
        is_active: meditation.is_active !== undefined ? meditation.is_active : true,
        created_at: meditation.created_at || meditation.createdAt || new Date().toISOString(),
        updated_at: meditation.updated_at || meditation.updatedAt || new Date().toISOString(),
        created_by: meditation.created_by || meditation.createdBy,
        bible_verse: meditation.bible_verse || meditation.bibleVerse || '',
        prayer: meditation.prayer || '',
        practical_application: meditation.practical_application || meditation.practicalApplication || '',
        sort_order: meditation.sort_order || meditation.sortOrder || 0
    };
    
    console.log('‚úÖ Estrutura corrigida:', fixedMeditation);
    return fixedMeditation;
}

// Fun√ß√£o para corrigir fun√ß√£o de sincroniza√ß√£o de medita√ß√µes
function fixMeditationSyncFunction() {
    console.log('üîß Corrigindo fun√ß√£o de sincroniza√ß√£o de medita√ß√µes...');
    
    if (window.adminSupabaseSync && window.adminSupabaseSync.syncMeditationToSupabase) {
        const originalFunction = window.adminSupabaseSync.syncMeditationToSupabase;
        
        window.adminSupabaseSync.syncMeditationToSupabase = async function(meditation, operation = 'create') {
            console.log('üîÑ Sincronizando medita√ß√£o para Supabase (vers√£o corrigida)...');
            
            try {
                // Corrigir estrutura dos dados
                const fixedMeditation = fixMeditationDataStructure(meditation);
                
                console.log('üìã Dados corrigidos para sincroniza√ß√£o:', fixedMeditation);
                
                // Remover campos que n√£o existem na tabela
                const { id, title, content, category_id, duration, difficulty, tags, is_active, created_at, updated_at, created_by, bible_verse, prayer, practical_application, sort_order } = fixedMeditation;
                
                const supabaseData = {
                    title,
                    content,
                    category_id,
                    duration,
                    difficulty,
                    tags,
                    is_active,
                    created_at,
                    updated_at,
                    created_by,
                    bible_verse,
                    prayer,
                    practical_application,
                    sort_order
                };
                
                console.log('üì§ Dados para enviar ao Supabase:', supabaseData);
                
                let response;
                if (operation === 'create') {
                    response = await this.supabaseManager.createMeditation(supabaseData);
                } else if (operation === 'update') {
                    response = await this.supabaseManager.updateMeditation(id, supabaseData);
                } else if (operation === 'delete') {
                    response = await this.supabaseManager.deleteMeditation(id);
                }
                
                console.log('‚úÖ Medita√ß√£o sincronizada com sucesso:', response);
                return response;
                
            } catch (error) {
                console.error('‚ùå Erro ao sincronizar medita√ß√£o:', error);
                throw error;
            }
        };
        
        console.log('‚úÖ Fun√ß√£o de sincroniza√ß√£o de medita√ß√µes corrigida');
    } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o syncMeditationToSupabase n√£o encontrada');
    }
}

// Fun√ß√£o para corrigir fun√ß√£o de cria√ß√£o de medita√ß√µes no Supabase
function fixSupabaseCreateMeditation() {
    console.log('üîß Corrigindo fun√ß√£o de cria√ß√£o de medita√ß√µes no Supabase...');
    
    if (window.supabaseManager && window.supabaseManager.createMeditation) {
        const originalFunction = window.supabaseManager.createMeditation;
        
        window.supabaseManager.createMeditation = async function(meditationData) {
            console.log('üîÑ Criando medita√ß√£o no Supabase (vers√£o corrigida)...');
            
            try {
                // Garantir que os dados est√£o na estrutura correta
                const fixedData = fixMeditationDataStructure(meditationData);
                
                // Remover campos que n√£o devem ser enviados na cria√ß√£o
                const { id, created_at, updated_at, ...createData } = fixedData;
                
                console.log('üì§ Dados para cria√ß√£o:', createData);
                
                const response = await this.request('/meditations', {
                    method: 'POST',
                    body: createData
                });
                
                console.log('‚úÖ Medita√ß√£o criada no Supabase:', response);
                return response;
                
            } catch (error) {
                console.error('‚ùå Erro ao criar medita√ß√£o no Supabase:', error);
                throw error;
            }
        };
        
        console.log('‚úÖ Fun√ß√£o de cria√ß√£o de medita√ß√µes no Supabase corrigida');
    } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o createMeditation n√£o encontrada');
    }
}

// Fun√ß√£o para corrigir fun√ß√£o de atualiza√ß√£o de medita√ß√µes no Supabase
function fixSupabaseUpdateMeditation() {
    console.log('üîß Corrigindo fun√ß√£o de atualiza√ß√£o de medita√ß√µes no Supabase...');
    
    if (window.supabaseManager && window.supabaseManager.updateMeditation) {
        const originalFunction = window.supabaseManager.updateMeditation;
        
        window.supabaseManager.updateMeditation = async function(id, meditationData) {
            console.log('üîÑ Atualizando medita√ß√£o no Supabase (vers√£o corrigida)...');
            
            try {
                // Garantir que os dados est√£o na estrutura correta
                const fixedData = fixMeditationDataStructure(meditationData);
                
                // Remover campos que n√£o devem ser atualizados
                const { id: _, created_at, ...updateData } = fixedData;
                updateData.updated_at = new Date().toISOString();
                
                console.log('üì§ Dados para atualiza√ß√£o:', updateData);
                
                const response = await this.request(`/meditations?id=eq.${id}`, {
                    method: 'PATCH',
                    body: updateData
                });
                
                console.log('‚úÖ Medita√ß√£o atualizada no Supabase:', response);
                return response;
                
            } catch (error) {
                console.error('‚ùå Erro ao atualizar medita√ß√£o no Supabase:', error);
                throw error;
            }
        };
        
        console.log('‚úÖ Fun√ß√£o de atualiza√ß√£o de medita√ß√µes no Supabase corrigida');
    } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o updateMeditation n√£o encontrada');
    }
}

// Fun√ß√£o para verificar estrutura da tabela meditations
async function checkMeditationsTableStructure() {
    console.log('üîç Verificando estrutura da tabela meditations...');
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/meditations?select=*&limit=1`, {
            method: 'GET',
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            console.log('‚úÖ Tabela meditations acess√≠vel');
            return true;
        } else {
            const errorData = await response.json();
            console.error('‚ùå Erro ao acessar tabela meditations:', errorData);
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar estrutura da tabela meditations:', error);
        return false;
    }
}

// Fun√ß√£o para testar cria√ß√£o de medita√ß√£o
async function testMeditationCreation() {
    console.log('üß™ Testando cria√ß√£o de medita√ß√£o...');
    
    try {
        const testMeditation = {
            title: 'Teste de Medita√ß√£o',
            content: 'Conte√∫do de teste para verificar sincroniza√ß√£o',
            category_id: 'c7293f33-a9fd-4986-ab51-f164d2ab9cfa', // ID da categoria Salmos
            duration: 15,
            difficulty: 'intermediate',
            tags: ['teste', 'sincroniza√ß√£o'],
            is_active: true,
            bible_verse: 'Salmo 1:1-2',
            prayer: 'Ora√ß√£o de teste',
            practical_application: 'Aplica√ß√£o pr√°tica de teste'
        };
        
        console.log('üìã Medita√ß√£o de teste:', testMeditation);
        
        if (window.supabaseManager && window.supabaseManager.createMeditation) {
            const result = await window.supabaseManager.createMeditation(testMeditation);
            console.log('‚úÖ Teste de cria√ß√£o bem-sucedido:', result);
            return true;
        } else {
            console.warn('‚ö†Ô∏è Fun√ß√£o createMeditation n√£o dispon√≠vel');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste de cria√ß√£o:', error);
        return false;
    }
}

// Fun√ß√£o principal para corrigir estrutura de medita√ß√µes
async function fixMeditationStructure() {
    console.log('üîß Iniciando corre√ß√£o da estrutura de medita√ß√µes...');
    
    // 1. Verificar estrutura da tabela
    const tableExists = await checkMeditationsTableStructure();
    
    if (!tableExists) {
        console.error('‚ùå Tabela meditations n√£o est√° acess√≠vel');
        console.log('‚ÑπÔ∏è Execute o script fix-meditations-table.sql no Supabase');
        return;
    }
    
    // 2. Corrigir fun√ß√µes de sincroniza√ß√£o
    fixMeditationSyncFunction();
    fixSupabaseCreateMeditation();
    fixSupabaseUpdateMeditation();
    
    // 3. Testar cria√ß√£o
    const testResult = await testMeditationCreation();
    
    if (testResult) {
        console.log('‚úÖ Estrutura de medita√ß√µes corrigida com sucesso');
    } else {
        console.warn('‚ö†Ô∏è Problemas na corre√ß√£o da estrutura');
    }
}

// Exportar fun√ß√µes
window.fixMeditationStructure = fixMeditationStructure;
window.fixMeditationDataStructure = fixMeditationDataStructure;
window.checkMeditationsTableStructure = checkMeditationsTableStructure;
window.testMeditationCreation = testMeditationCreation;

// Auto-inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script de corre√ß√£o da estrutura de medita√ß√µes carregado');
    
    // Aguardar um pouco e executar corre√ß√£o
    setTimeout(async () => {
        console.log('üîß Executando corre√ß√£o autom√°tica da estrutura de medita√ß√µes...');
        await fixMeditationStructure();
    }, 1000);
});

console.log('‚úÖ Script de corre√ß√£o da estrutura de medita√ß√µes carregado'); 